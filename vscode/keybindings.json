// Setzen Sie Tastenzuordnungen au√üer Kraft, indem Sie sie in ihre Tastenzuordnungsdatei eingeben.
[
    { "key": "escape escape",         "command": "workbench.action.exitZenMode",
                                         "when": "inZenMode" },
    { "key": "shift+escape",          "command": "closeReferenceSearch",
                                         "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
    { "key": "escape",                "command": "closeReferenceSearch",
                                         "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
    { "key": "escape",                "command": "editor.closeTestPeek",
                                         "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek" },
    { "key": "shift+escape",          "command": "cancelSelection",
                                         "when": "editorHasSelection && textInputFocus" },
    { "key": "escape",                "command": "cancelSelection",
                                         "when": "editorHasSelection && textInputFocus" },
    { "key": "cmd+down",              "command": "cursorBottom",
                                         "when": "textInputFocus" },
    { "key": "shift+cmd+down",        "command": "cursorBottomSelect",
                                         "when": "textInputFocus" },
    { "key": "shift+alt+cmd+down",    "command": "cursorColumnSelectDown",
                                         "when": "textInputFocus" },
    { "key": "shift+alt+cmd+left",    "command": "cursorColumnSelectLeft",
                                         "when": "textInputFocus" },
    { "key": "shift+alt+cmd+pagedown", "command": "cursorColumnSelectPageDown",
                                         "when": "textInputFocus" },
    { "key": "shift+alt+cmd+pageup",  "command": "cursorColumnSelectPageUp",
                                         "when": "textInputFocus" },
    { "key": "shift+alt+cmd+right",   "command": "cursorColumnSelectRight",
                                         "when": "textInputFocus" },
    { "key": "shift+alt+cmd+up",      "command": "cursorColumnSelectUp",
                                         "when": "textInputFocus" },
    { "key": "ctrl+n",                "command": "cursorDown",
                                         "when": "textInputFocus" },
    { "key": "down",                  "command": "cursorDown",
                                         "when": "textInputFocus" },
    { "key": "shift+down",            "command": "cursorDownSelect",
                                         "when": "textInputFocus" },
    { "key": "cmd+right",             "command": "cursorEnd",
                                         "when": "textInputFocus",
                                         "args": {"sticky":false} },
    { "key": "end",                   "command": "cursorEnd",
                                         "when": "textInputFocus",
                                         "args": {"sticky":false} },
    { "key": "shift+cmd+right",       "command": "cursorEndSelect",
                                         "when": "textInputFocus",
                                         "args": {"sticky":false} },
    { "key": "shift+end",             "command": "cursorEndSelect",
                                         "when": "textInputFocus",
                                         "args": {"sticky":false} },
    { "key": "cmd+left",              "command": "cursorHome",
                                         "when": "textInputFocus" },
    { "key": "home",                  "command": "cursorHome",
                                         "when": "textInputFocus" },
    { "key": "shift+cmd+left",        "command": "cursorHomeSelect",
                                         "when": "textInputFocus" },
    { "key": "shift+home",            "command": "cursorHomeSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+b",                "command": "cursorLeft",
                                         "when": "textInputFocus" },
    { "key": "left",                  "command": "cursorLeft",
                                         "when": "textInputFocus" },
    { "key": "shift+left",            "command": "cursorLeftSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+e",                "command": "cursorLineEnd",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+e",          "command": "cursorLineEndSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+a",                "command": "cursorLineStart",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+a",          "command": "cursorLineStartSelect",
                                         "when": "textInputFocus" },
    { "key": "pagedown",              "command": "cursorPageDown",
                                         "when": "textInputFocus" },
    { "key": "shift+pagedown",        "command": "cursorPageDownSelect",
                                         "when": "textInputFocus" },
    { "key": "pageup",                "command": "cursorPageUp",
                                         "when": "textInputFocus" },
    { "key": "shift+pageup",          "command": "cursorPageUpSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+f",                "command": "cursorRight",
                                         "when": "textInputFocus" },
    { "key": "right",                 "command": "cursorRight",
                                         "when": "textInputFocus" },
    { "key": "shift+right",           "command": "cursorRightSelect",
                                         "when": "textInputFocus" },
    { "key": "cmd+up",                "command": "cursorTop",
                                         "when": "textInputFocus" },
    { "key": "shift+cmd+up",          "command": "cursorTopSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+p",                "command": "cursorUp",
                                         "when": "textInputFocus" },
    { "key": "up",                    "command": "cursorUp",
                                         "when": "textInputFocus" },
    { "key": "shift+up",              "command": "cursorUpSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+backspace",        "command": "deleteLeft",
                                         "when": "textInputFocus" },
    { "key": "ctrl+h",                "command": "deleteLeft",
                                         "when": "textInputFocus" },
    { "key": "shift+backspace",       "command": "deleteLeft",
                                         "when": "textInputFocus" },
    { "key": "backspace",             "command": "deleteLeft",
                                         "when": "textInputFocus" },
    { "key": "ctrl+delete",           "command": "deleteRight",
                                         "when": "textInputFocus" },
    { "key": "ctrl+d",                "command": "deleteRight",
                                         "when": "textInputFocus" },
    { "key": "delete",                "command": "deleteRight",
                                         "when": "textInputFocus" },
    { "key": "cmd+a",                 "command": "editor.action.selectAll" },
    { "key": "cmd+c",                 "command": "execCopy" },
    { "key": "cmd+x",                 "command": "execCut" },
    { "key": "cmd+v",                 "command": "execPaste" },
    { "key": "cmd+l",                 "command": "expandLineSelection",
                                         "when": "textInputFocus" },
    { "key": "ctrl+o",                "command": "lineBreakInsert",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "shift+tab",             "command": "outdent",
                                         "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
    { "key": "shift+cmd+z",           "command": "redo" },
    { "key": "ctrl+pagedown",         "command": "scrollLineDown",
                                         "when": "textInputFocus" },
    { "key": "ctrl+pageup",           "command": "scrollLineUp",
                                         "when": "textInputFocus" },
    { "key": "cmd+pagedown",          "command": "scrollPageDown",
                                         "when": "textInputFocus" },
    { "key": "cmd+pageup",            "command": "scrollPageUp",
                                         "when": "textInputFocus" },
    { "key": "tab",                   "command": "tab",
                                         "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
    { "key": "cmd+z",                 "command": "undo" },
    { "key": "shift+down",            "command": "cursorColumnSelectDown",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+left",            "command": "cursorColumnSelectLeft",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+pagedown",        "command": "cursorColumnSelectPageDown",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+pageup",          "command": "cursorColumnSelectPageUp",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+right",           "command": "cursorColumnSelectRight",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+up",              "command": "cursorColumnSelectUp",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+escape",          "command": "removeSecondaryCursors",
                                         "when": "editorHasMultipleSelections && textInputFocus" },
    { "key": "escape",                "command": "removeSecondaryCursors",
                                         "when": "editorHasMultipleSelections && textInputFocus" },
    { "key": "f12",                   "command": "goToNextReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "f4",                    "command": "goToNextReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "shift+f12",             "command": "goToPreviousReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "shift+f4",              "command": "goToPreviousReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "shift+enter",           "command": "refactorPreview.apply",
                                         "when": "refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'" },
    { "key": "alt+enter",             "command": "testing.editFocusedTest",
                                         "when": "focusedView == 'workbench.view.testing'" },
    { "key": "escape",                "command": "notebook.cell.quitEdit",
                                         "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible" },
    { "key": "ctrl+enter",            "command": "notebook.cell.quitEdit",
                                         "when": "inputFocus && notebookEditorFocused && notebookCellType == 'markup'" },
    { "key": "cmd+f",                 "command": "actions.find",
                                         "when": "editorFocus || editorIsOpen" },
    { "key": "cmd+e",                 "command": "actions.findWithSelection" },
    { "key": "enter",                 "command": "breakpointWidget.action.acceptInput",
                                         "when": "breakpointWidgetVisible && inBreakpointWidget" },
    { "key": "shift+escape",          "command": "closeBreakpointWidget",
                                         "when": "breakpointWidgetVisible && textInputFocus" },
    { "key": "escape",                "command": "closeBreakpointWidget",
                                         "when": "breakpointWidgetVisible && textInputFocus" },
    { "key": "cmd+u",                 "command": "cursorUndo",
                                         "when": "textInputFocus" },
    { "key": "alt+right",             "command": "cursorWordEndRight",
                                         "when": "textInputFocus" },
    { "key": "shift+alt+right",       "command": "cursorWordEndRightSelect",
                                         "when": "textInputFocus" },
    { "key": "alt+left",              "command": "cursorWordLeft",
                                         "when": "textInputFocus" },
    { "key": "shift+alt+left",        "command": "cursorWordLeftSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+alt+left",         "command": "cursorWordPartLeft",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+alt+left",   "command": "cursorWordPartLeftSelect",
                                         "when": "textInputFocus" },
    { "key": "ctrl+alt+right",        "command": "cursorWordPartRight",
                                         "when": "textInputFocus" },
    { "key": "ctrl+shift+alt+right",  "command": "cursorWordPartRightSelect",
                                         "when": "textInputFocus" },
    { "key": "cmd+backspace",         "command": "deleteAllLeft",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "cmd+delete",            "command": "deleteAllRight",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "ctrl+k",                "command": "deleteAllRight",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "alt+backspace",         "command": "deleteWordLeft",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "ctrl+alt+backspace",    "command": "deleteWordPartLeft",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "ctrl+alt+delete",       "command": "deleteWordPartRight",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "alt+delete",            "command": "deleteWordRight",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "cmd+k cmd+c",           "command": "editor.action.addCommentLine",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "cmd+d",                 "command": "editor.action.addSelectionToNextFindMatch",
                                         "when": "editorFocus" },
    { "key": "alt+cmd+[Period]",      "command": "editor.action.autoFix",
                                         "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/" },
    { "key": "shift+alt+a",           "command": "editor.action.blockComment",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "escape",                "command": "editor.action.cancelSelectionAnchor",
                                         "when": "editorTextFocus && selectionAnchorSet" },
    { "key": "cmd+f2",                "command": "editor.action.changeAll",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "cmd+c",                 "command": "editor.action.clipboardCopyAction" },
    { "key": "cmd+x",                 "command": "editor.action.clipboardCutAction" },
    { "key": "cmd+v",                 "command": "editor.action.clipboardPasteAction" },
    { "key": "shift+cmd+7",           "command": "editor.action.commentLine",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "shift+alt+down",        "command": "editor.action.copyLinesDownAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "shift+alt+up",          "command": "editor.action.copyLinesUpAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "shift+cmd+k",           "command": "editor.action.deleteLines",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "f7",                    "command": "editor.action.diffReview.next",
                                         "when": "isInDiffEditor" },
    { "key": "shift+f7",              "command": "editor.action.diffReview.prev",
                                         "when": "isInDiffEditor" },
    { "key": "alt+f3",                "command": "editor.action.dirtydiff.next",
                                         "when": "editorTextFocus && !textCompareEditorActive" },
    { "key": "shift+alt+f3",          "command": "editor.action.dirtydiff.previous",
                                         "when": "editorTextFocus && !textCompareEditorActive" },
    { "key": "enter",                 "command": "editor.action.extensioneditor.findNext",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },
    { "key": "shift+enter",           "command": "editor.action.extensioneditor.findPrevious",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },
    { "key": "cmd+f",                 "command": "editor.action.extensioneditor.showfind",
                                         "when": "!editorFocus && activeEditor == 'workbench.editor.extension'" },
    { "key": "shift+alt+f",           "command": "editor.action.formatDocument",
                                         "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor" },
    { "key": "shift+alt+f",           "command": "editor.action.formatDocument.none",
                                         "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly" },
    { "key": "cmd+k cmd+f",           "command": "editor.action.formatSelection",
                                         "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly" },
    { "key": "cmd+f12",               "command": "editor.action.goToImplementation",
                                         "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor" },
    { "key": "shift+f12",             "command": "editor.action.goToReferences",
                                         "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
    { "key": "shift+cmd+[IntlRo]",    "command": "editor.action.inPlaceReplace.down",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "shift+cmd+[Backquote]", "command": "editor.action.inPlaceReplace.down",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "cmd+[IntlRo]",          "command": "editor.action.inPlaceReplace.up",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "cmd+[Backquote]",       "command": "editor.action.inPlaceReplace.up",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+alt+cmd+6",        "command": "editor.action.indentLines",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "escape",                "command": "editor.action.inlineSuggest.hide",
                                         "when": "inlineSuggestionVisible" },
    { "key": "alt+cmd+up",            "command": "editor.action.insertCursorAbove",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+i",           "command": "editor.action.insertCursorAtEndOfEachLineSelected",
                                         "when": "editorTextFocus" },
    { "key": "alt+cmd+down",          "command": "editor.action.insertCursorBelow",
                                         "when": "editorTextFocus" },
    { "key": "cmd+enter",             "command": "editor.action.insertLineAfter",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "shift+cmd+enter",       "command": "editor.action.insertLineBefore",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+j",                "command": "editor.action.joinLines",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "ctrl+alt+cmd+7",        "command": "editor.action.jumpToBracket",
                                         "when": "editorTextFocus" },
    { "key": "shift+cmd+f2",          "command": "editor.action.linkedEditing",
                                         "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
    { "key": "alt+f8",                "command": "editor.action.marker.next",
                                         "when": "editorFocus" },
    { "key": "f8",                    "command": "editor.action.marker.nextInFiles",
                                         "when": "editorFocus" },
    { "key": "shift+alt+f8",          "command": "editor.action.marker.prev",
                                         "when": "editorFocus" },
    { "key": "shift+f8",              "command": "editor.action.marker.prevInFiles",
                                         "when": "editorFocus" },
    { "key": "alt+down",              "command": "editor.action.moveLinesDownAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+up",                "command": "editor.action.moveLinesUpAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "cmd+k cmd+d",           "command": "editor.action.moveSelectionToNextFindMatch",
                                         "when": "editorFocus" },
    { "key": "alt+f9",                "command": "editor.action.nextCommentThreadAction",
                                         "when": "editorFocus" },
    { "key": "f3",                    "command": "editor.action.nextMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "cmd+g",                 "command": "editor.action.nextMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "enter",                 "command": "editor.action.nextMatchFindAction",
                                         "when": "editorFocus && findInputFocussed" },
    { "key": "cmd+f3",                "command": "editor.action.nextSelectionMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "shift+alt+o",           "command": "editor.action.organizeImports",
                                         "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/" },
    { "key": "ctrl+alt+cmd+5",        "command": "editor.action.outdentLines",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+f12",               "command": "editor.action.peekDefinition",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
    { "key": "shift+cmd+f12",         "command": "editor.action.peekImplementation",
                                         "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
    { "key": "shift+alt+f9",          "command": "editor.action.previousCommentThreadAction",
                                         "when": "editorFocus" },
    { "key": "shift+f3",              "command": "editor.action.previousMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "shift+cmd+g",           "command": "editor.action.previousMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "shift+enter",           "command": "editor.action.previousMatchFindAction",
                                         "when": "editorFocus && findInputFocussed" },
    { "key": "shift+cmd+f3",          "command": "editor.action.previousSelectionMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "cmd+[Period]",          "command": "editor.action.quickFix",
                                         "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },
    { "key": "ctrl+shift+r",          "command": "editor.action.refactor",
                                         "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },
    { "key": "cmd+k cmd+u",           "command": "editor.action.removeCommentLine",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "f2",                    "command": "editor.action.rename",
                                         "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
    { "key": "f12",                   "command": "editor.action.revealDefinition",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
    { "key": "cmd+k f12",             "command": "editor.action.revealDefinitionAside",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
    { "key": "cmd+k cmd+k",           "command": "editor.action.selectFromAnchorToCursor",
                                         "when": "editorTextFocus && selectionAnchorSet" },
    { "key": "shift+cmd+l",           "command": "editor.action.selectHighlights",
                                         "when": "editorFocus" },
    { "key": "cmd+k cmd+b",           "command": "editor.action.setSelectionAnchor",
                                         "when": "editorTextFocus" },
    { "key": "alt+f1",                "command": "editor.action.showAccessibilityHelp" },
    { "key": "shift+f10",             "command": "editor.action.showContextMenu",
                                         "when": "textInputFocus" },
    { "key": "cmd+k cmd+i",           "command": "editor.action.showHover",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+shift+right",      "command": "editor.action.smartSelect.expand",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+shift+cmd+right",  "command": "editor.action.smartSelect.expand",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+shift+left",       "command": "editor.action.smartSelect.shrink",
                                         "when": "editorTextFocus" },
    { "key": "ctrl+shift+cmd+left",   "command": "editor.action.smartSelect.shrink",
                                         "when": "editorTextFocus" },
    { "key": "alt+cmd+f",             "command": "editor.action.startFindReplaceAction",
                                         "when": "editorFocus || editorIsOpen" },
    { "key": "ctrl+shift+m",          "command": "editor.action.toggleTabFocusMode" },
    { "key": "alt+z",                 "command": "editor.action.toggleWordWrap" },
    { "key": "ctrl+t",                "command": "editor.action.transposeLetters",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "shift+cmd+space",       "command": "editor.action.triggerParameterHints",
                                         "when": "editorHasSignatureHelpProvider && editorTextFocus" },
    { "key": "cmd+i",                 "command": "editor.action.triggerSuggest",
                                         "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible" },
    { "key": "alt+escape",            "command": "editor.action.triggerSuggest",
                                         "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible" },
    { "key": "ctrl+space",            "command": "editor.action.triggerSuggest",
                                         "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible" },
    { "key": "cmd+k cmd+x",           "command": "editor.action.trimTrailingWhitespace",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "enter",                 "command": "editor.action.webvieweditor.findNext",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "shift+enter",           "command": "editor.action.webvieweditor.findPrevious",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "escape",                "command": "editor.action.webvieweditor.hideFind",
                                         "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "cmd+f",                 "command": "editor.action.webvieweditor.showFind",
                                         "when": "webviewFindWidgetEnabled && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "f7",                    "command": "editor.action.wordHighlight.next",
                                         "when": "editorTextFocus && hasWordHighlights" },
    { "key": "shift+f7",              "command": "editor.action.wordHighlight.prev",
                                         "when": "editorTextFocus && hasWordHighlights" },
    { "key": "escape",                "command": "editor.cancelOperation",
                                         "when": "cancellableOperation" },
    { "key": "cmd+k cmd+[Comma]",     "command": "editor.createFoldingRangeFromSelection",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "escape",                "command": "editor.debug.action.closeExceptionWidget",
                                         "when": "exceptionWidgetVisible" },
    { "key": "cmd+k cmd+i",           "command": "editor.debug.action.showDebugHover",
                                         "when": "editorTextFocus && inDebugMode" },
    { "key": "f9",                    "command": "editor.debug.action.toggleBreakpoint",
                                         "when": "debuggersAvailable && editorTextFocus" },
    { "key": "tab",                   "command": "editor.emmet.action.expandAbbreviation",
                                         "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
    { "key": "cmd+k cmd+0",           "command": "editor.foldAll",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k shift+cmd+7",     "command": "editor.foldAllBlockComments",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+-",           "command": "editor.foldAllExcept",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+8",           "command": "editor.foldAllMarkerRegions",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+1",           "command": "editor.foldLevel1",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+2",           "command": "editor.foldLevel2",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+3",           "command": "editor.foldLevel3",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+4",           "command": "editor.foldLevel4",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+5",           "command": "editor.foldLevel5",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+6",           "command": "editor.foldLevel6",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+7",           "command": "editor.foldLevel7",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k ctrl+alt+cmd+5",  "command": "editor.foldRecursively",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "f12",                   "command": "editor.gotoNextSymbolFromResult",
                                         "when": "hasSymbols" },
    { "key": "escape",                "command": "editor.gotoNextSymbolFromResult.cancel",
                                         "when": "hasSymbols" },
    { "key": "cmd+k cmd+[Period]",    "command": "editor.removeManualFoldingRanges",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+l",           "command": "editor.toggleFold",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+j",           "command": "editor.unfoldAll",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k shift+cmd+0",     "command": "editor.unfoldAllExcept",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k cmd+9",           "command": "editor.unfoldAllMarkerRegions",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "cmd+k ctrl+alt+cmd+6",  "command": "editor.unfoldRecursively",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "escape",                "command": "inlayHints.stopReadingLineWithHint",
                                         "when": "isReadingLineWithInlayHints" },
    { "key": "tab",                   "command": "insertSnippet",
                                         "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode" },
    { "key": "ctrl+enter",            "command": "interactive.execute",
                                         "when": "resourceScheme == 'vscode-interactive'" },
    { "key": "pagedown",              "command": "notebook.cell.cursorPageDown",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused" },
    { "key": "shift+pagedown",        "command": "notebook.cell.cursorPageDownSelect",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused" },
    { "key": "pageup",                "command": "notebook.cell.cursorPageUp",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused" },
    { "key": "shift+pageup",          "command": "notebook.cell.cursorPageUpSelect",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused" },
    { "key": "ctrl+enter",            "command": "notebook.cell.execute",
                                         "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0" },
    { "key": "alt+enter",             "command": "notebook.cell.executeAndInsertBelow",
                                         "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0" },
    { "key": "shift+enter",           "command": "notebook.cell.executeAndSelectBelow",
                                         "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0" },
    { "key": "shift+cmd+v",           "command": "notebook.cell.pasteAbove",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "down",                  "command": "notebook.focusNextEditor",
                                         "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'" },
    { "key": "up",                    "command": "notebook.focusPreviousEditor",
                                         "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'" },
    { "key": "shift+alt+f",           "command": "notebook.formatCell",
                                         "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'" },
    { "key": "ctrl+enter",            "command": "openReferenceToSide",
                                         "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand" },
    { "key": "enter",                 "command": "repl.action.acceptInput",
                                         "when": "inDebugRepl && textInputFocus" },
    { "key": "cmd+f",                 "command": "repl.action.filter",
                                         "when": "inDebugRepl && textInputFocus" },
    { "key": "shift+cmd+r",           "command": "rerunSearchEditorSearch",
                                         "when": "inSearchEditor" },
    { "key": "escape",                "command": "search.action.focusQueryEditorWidget",
                                         "when": "inSearchEditor" },
    { "key": "shift+cmd+backspace",   "command": "search.searchEditor.action.deleteFileResults",
                                         "when": "inSearchEditor" },
    { "key": "escape",                "command": "settings.action.clearSearchResults",
                                         "when": "inSettingsEditor && inSettingsSearch" },
    { "key": "down",                  "command": "settings.action.focusSettingsFile",
                                         "when": "inSettingsSearch && !suggestWidgetVisible" },
    { "key": "cmd+f",                 "command": "settings.action.search",
                                         "when": "inSettingsEditor" },
    { "key": "shift+cmd+7",           "command": "toggleExplainMode",
                                         "when": "suggestWidgetVisible" },
    { "key": "cmd+k f2",              "command": "togglePeekWidgetFocus",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "escape",                "command": "welcome.goBack",
                                         "when": "inWelcome && activeEditor == 'gettingStartedPage'" },
    { "key": "alt+f5",                "command": "workbench.action.editor.nextChange",
                                         "when": "editorTextFocus && !textCompareEditorActive" },
    { "key": "shift+alt+f5",          "command": "workbench.action.editor.previousChange",
                                         "when": "editorTextFocus && !textCompareEditorActive" },
    { "key": "shift+escape",          "command": "workbench.action.hideComment",
                                         "when": "commentEditorFocused" },
    { "key": "escape",                "command": "workbench.action.hideComment",
                                         "when": "commentEditorFocused" },
    { "key": "cmd+enter",             "command": "workbench.action.submitComment",
                                         "when": "commentEditorFocused" },
    { "key": "cmd+right",             "command": "editor.action.inlineSuggest.acceptNextWord",
                                         "when": "inlineSuggestionVisible && !editorReadonly" },
    { "key": "cmd+left",              "command": "editor.action.inlineSuggest.undo",
                                         "when": "canUndoInlineSuggestion && !editorReadonly" },
    { "key": "alt+f8",                "command": "testing.goToNextMessage",
                                         "when": "editorFocus && testing.isPeekVisible" },
    { "key": "shift+alt+f8",          "command": "testing.goToPreviousMessage",
                                         "when": "editorFocus && testing.isPeekVisible" },
    { "key": "shift+escape",          "command": "closeFindWidget",
                                         "when": "editorFocus && findWidgetVisible && !isComposing" },
    { "key": "escape",                "command": "closeFindWidget",
                                         "when": "editorFocus && findWidgetVisible && !isComposing" },
    { "key": "alt+cmd+enter",         "command": "editor.action.replaceAll",
                                         "when": "editorFocus && findWidgetVisible" },
    { "key": "cmd+enter",             "command": "editor.action.replaceAll",
                                         "when": "editorFocus && findWidgetVisible && replaceInputFocussed" },
    { "key": "shift+cmd+1",           "command": "editor.action.replaceOne",
                                         "when": "editorFocus && findWidgetVisible" },
    { "key": "enter",                 "command": "editor.action.replaceOne",
                                         "when": "editorFocus && findWidgetVisible && replaceInputFocussed" },
    { "key": "alt+enter",             "command": "editor.action.selectAllMatches",
                                         "when": "editorFocus && findWidgetVisible" },
    { "key": "alt+cmd+c",             "command": "toggleFindCaseSensitive",
                                         "when": "editorFocus" },
    { "key": "alt+cmd+l",             "command": "toggleFindInSelection",
                                         "when": "editorFocus" },
    { "key": "alt+cmd+r",             "command": "toggleFindRegex",
                                         "when": "editorFocus" },
    { "key": "alt+cmd+w",             "command": "toggleFindWholeWord",
                                         "when": "editorFocus" },
    { "key": "alt+cmd+p",             "command": "togglePreserveCase",
                                         "when": "editorFocus" },
    { "key": "tab",                   "command": "jumpToNextSnippetPlaceholder",
                                         "when": "editorTextFocus && hasNextTabstop && inSnippetMode" },
    { "key": "shift+tab",             "command": "jumpToPrevSnippetPlaceholder",
                                         "when": "editorTextFocus && hasPrevTabstop && inSnippetMode" },
    { "key": "escape",                "command": "leaveEditorMessage",
                                         "when": "messageVisible" },
    { "key": "shift+escape",          "command": "leaveSnippet",
                                         "when": "editorTextFocus && inSnippetMode" },
    { "key": "escape",                "command": "leaveSnippet",
                                         "when": "editorTextFocus && inSnippetMode" },
    { "key": "shift+escape",          "command": "closeDirtyDiff",
                                         "when": "dirtyDiffVisible" },
    { "key": "escape",                "command": "closeDirtyDiff",
                                         "when": "dirtyDiffVisible" },
    { "key": "shift+escape",          "command": "closeMarkersNavigation",
                                         "when": "editorFocus && markersNavigationVisible" },
    { "key": "escape",                "command": "closeMarkersNavigation",
                                         "when": "editorFocus && markersNavigationVisible" },
    { "key": "escape",                "command": "notifications.hideToasts",
                                         "when": "notificationToastsVisible" },
    { "key": "shift+escape",          "command": "closeParameterHints",
                                         "when": "editorFocus && parameterHintsVisible" },
    { "key": "escape",                "command": "closeParameterHints",
                                         "when": "editorFocus && parameterHintsVisible" },
    { "key": "ctrl+n",                "command": "showNextParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "alt+down",              "command": "showNextParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "down",                  "command": "showNextParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "ctrl+p",                "command": "showPrevParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "alt+up",                "command": "showPrevParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "up",                    "command": "showPrevParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "shift+tab",             "command": "acceptAlternativeSelectedSuggestion",
                                         "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
    { "key": "shift+enter",           "command": "acceptAlternativeSelectedSuggestion",
                                         "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
    { "key": "tab",                   "command": "acceptSelectedSuggestion",
                                         "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
    { "key": "enter",                 "command": "acceptSelectedSuggestion",
                                         "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus" },
    { "key": "cmd+i",                 "command": "focusSuggestion",
                                         "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "ctrl+space",            "command": "focusSuggestion",
                                         "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "shift+escape",          "command": "hideSuggestWidget",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "escape",                "command": "hideSuggestWidget",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "tab",                   "command": "insertBestCompletion",
                                         "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
    { "key": "tab",                   "command": "insertNextSuggestion",
                                         "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
    { "key": "shift+tab",             "command": "insertPrevSuggestion",
                                         "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
    { "key": "cmd+pagedown",          "command": "selectNextPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "pagedown",              "command": "selectNextPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "ctrl+n",                "command": "selectNextSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "cmd+down",              "command": "selectNextSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "down",                  "command": "selectNextSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "cmd+pageup",            "command": "selectPrevPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "pageup",                "command": "selectPrevPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "ctrl+p",                "command": "selectPrevSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "cmd+up",                "command": "selectPrevSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "up",                    "command": "selectPrevSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
    { "key": "cmd+i",                 "command": "toggleSuggestionDetails",
                                         "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
    { "key": "ctrl+space",            "command": "toggleSuggestionDetails",
                                         "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
    { "key": "ctrl+alt+space",        "command": "toggleSuggestionFocus",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "enter",                 "command": "acceptRenameInput",
                                         "when": "editorFocus && renameInputVisible" },
    { "key": "shift+enter",           "command": "acceptRenameInputWithPreview",
                                         "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible" },
    { "key": "shift+escape",          "command": "cancelLinkedEditingInput",
                                         "when": "LinkedEditingInputVisible && editorTextFocus" },
    { "key": "escape",                "command": "cancelLinkedEditingInput",
                                         "when": "LinkedEditingInputVisible && editorTextFocus" },
    { "key": "shift+escape",          "command": "cancelRenameInput",
                                         "when": "editorFocus && renameInputVisible" },
    { "key": "escape",                "command": "cancelRenameInput",
                                         "when": "editorFocus && renameInputVisible" },
    { "key": "shift+cmd+l",           "command": "addCursorsAtSearchResults",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "shift+cmd+[Period]",    "command": "breadcrumbs.focus",
                                         "when": "breadcrumbsPossible && breadcrumbsVisible" },
    { "key": "shift+cmd+[IntlRo]",    "command": "breadcrumbs.focusAndSelect",
                                         "when": "breadcrumbsPossible && breadcrumbsVisible" },
    { "key": "shift+cmd+[Backquote]", "command": "breadcrumbs.focusAndSelect",
                                         "when": "breadcrumbsPossible && breadcrumbsVisible" },
    { "key": "alt+right",             "command": "breadcrumbs.focusNext",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "right",                 "command": "breadcrumbs.focusNext",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "alt+left",              "command": "breadcrumbs.focusPrevious",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "left",                  "command": "breadcrumbs.focusPrevious",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "cmd+enter",             "command": "breadcrumbs.revealFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "space",                 "command": "breadcrumbs.revealFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "cmd+enter",             "command": "breadcrumbs.revealFocusedFromTreeAside",
                                         "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus" },
    { "key": "down",                  "command": "breadcrumbs.selectFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "enter",                 "command": "breadcrumbs.selectFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "shift+cmd+[IntlRo]",    "command": "breadcrumbs.toggleToOn",
                                         "when": "!config.breadcrumbs.enabled" },
    { "key": "shift+cmd+[Backquote]", "command": "breadcrumbs.toggleToOn",
                                         "when": "!config.breadcrumbs.enabled" },
    { "key": "shift+escape",          "command": "closeAccessibilityHelp",
                                         "when": "accessibilityHelpWidgetVisible && editorFocus" },
    { "key": "escape",                "command": "closeAccessibilityHelp",
                                         "when": "accessibilityHelpWidgetVisible && editorFocus" },
    { "key": "escape",                "command": "closeReplaceInFilesWidget",
                                         "when": "replaceInputBoxFocus && searchViewletVisible" },
    { "key": "escape",                "command": "commentsClearFilterText",
                                         "when": "commentsFilterFocus" },
    { "key": "cmd+f",                 "command": "commentsFocusFilter",
                                         "when": "focusedView == 'workbench.panel.comments'" },
    { "key": "cmd+down",              "command": "commentsFocusViewFromFilter",
                                         "when": "commentsFilterFocus" },
    { "key": "alt+cmd+c",             "command": "copyFilePath",
                                         "when": "!editorFocus" },
    { "key": "cmd+k alt+cmd+c",       "command": "copyFilePath",
                                         "when": "editorFocus" },
    { "key": "shift+alt+cmd+c",       "command": "copyRelativeFilePath",
                                         "when": "!editorFocus" },
    { "key": "cmd+k shift+alt+cmd+c", "command": "copyRelativeFilePath",
                                         "when": "editorFocus" },
    { "key": "alt+enter",             "command": "debug.openBreakpointToSide",
                                         "when": "breakpointsFocused" },
    { "key": "cmd+enter",             "command": "debug.openBreakpointToSide",
                                         "when": "breakpointsFocused" },
    { "key": "cmd+f5",                "command": "debug.openView",
                                         "when": "!debuggersAvailable" },
    { "key": "f5",                    "command": "debug.openView",
                                         "when": "!debuggersAvailable" },
    { "key": "cmd+backspace",         "command": "debug.removeBreakpoint",
                                         "when": "breakpointsFocused && !breakpointInputFocused" },
    { "key": "cmd+backspace",         "command": "debug.removeWatchExpression",
                                         "when": "watchExpressionsFocused && !expressionSelected" },
    { "key": "alt+-",                 "command": "decreaseSearchEditorContextLines",
                                         "when": "inSearchEditor" },
    { "key": "cmd+k cmd+k",           "command": "editor.action.defineKeybinding",
                                         "when": "resource == 'vscode-userdata:/Users/raphaelelicciardo/Library/Application%20Support/Code/User/keybindings.json'" },
    { "key": "tab",                   "command": "editor.action.inlineSuggest.commit",
                                         "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorTabMovesFocus" },
    { "key": "shift+f9",              "command": "editor.debug.action.toggleInlineBreakpoint",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+d",           "command": "editor.detectLanguage",
                                         "when": "editorTextFocus && !notebookEditable" },
    { "key": "shift+enter",           "command": "editor.refocusCallHierarchy",
                                         "when": "callHierarchyVisible" },
    { "key": "shift+enter",           "command": "editor.refocusTypeHierarchy",
                                         "when": "typeHierarchyVisible" },
    { "key": "shift+alt+h",           "command": "editor.showCallHierarchy",
                                         "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor" },
    { "key": "shift+alt+h",           "command": "editor.showIncomingCalls",
                                         "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'" },
    { "key": "shift+alt+h",           "command": "editor.showOutgoingCalls",
                                         "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'" },
    { "key": "shift+alt+h",           "command": "editor.showSubtypes",
                                         "when": "typeHierarchyVisible && typeHierarchyDirection == 'supertypes'" },
    { "key": "shift+alt+h",           "command": "editor.showSupertypes",
                                         "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'" },
    { "key": "ctrl+enter",            "command": "explorer.openToSide",
                                         "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus" },
    { "key": "shift+alt+f",           "command": "filesExplorer.findInFolder",
                                         "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus" },
    { "key": "alt+down",              "command": "history.showNext",
                                         "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !suggestWidgetVisible" },
    { "key": "down",                  "command": "history.showNext",
                                         "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !suggestWidgetVisible" },
    { "key": "alt+up",                "command": "history.showPrevious",
                                         "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !suggestWidgetVisible" },
    { "key": "up",                    "command": "history.showPrevious",
                                         "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !suggestWidgetVisible" },
    { "key": "shift+alt+0",           "command": "increaseSearchEditorContextLines",
                                         "when": "inSearchEditor" },
    { "key": "down",                  "command": "interactive.history.next",
                                         "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'" },
    { "key": "up",                    "command": "interactive.history.previous",
                                         "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'" },
    { "key": "cmd+down",              "command": "interactive.scrollToBottom",
                                         "when": "resourceScheme == 'vscode-interactive'" },
    { "key": "cmd+up",                "command": "interactive.scrollToTop",
                                         "when": "resourceScheme == 'vscode-interactive'" },
    { "key": "enter",                 "command": "keybindings.editor.acceptWhenExpression",
                                         "when": "inKeybindings && whenFocus && !suggestWidgetVisible" },
    { "key": "cmd+k cmd+a",           "command": "keybindings.editor.addKeybinding",
                                         "when": "inKeybindings && keybindingFocus" },
    { "key": "escape",                "command": "keybindings.editor.clearSearchResults",
                                         "when": "inKeybindings && inKeybindingsSearch" },
    { "key": "cmd+c",                 "command": "keybindings.editor.copyKeybindingEntry",
                                         "when": "inKeybindings && keybindingFocus && !whenFocus" },
    { "key": "enter",                 "command": "keybindings.editor.defineKeybinding",
                                         "when": "inKeybindings && keybindingFocus && !whenFocus" },
    { "key": "cmd+k cmd+e",           "command": "keybindings.editor.defineWhenExpression",
                                         "when": "inKeybindings && keybindingFocus" },
    { "key": "cmd+down",              "command": "keybindings.editor.focusKeybindings",
                                         "when": "inKeybindings && inKeybindingsSearch" },
    { "key": "alt+cmd+k",             "command": "keybindings.editor.recordSearchKeys",
                                         "when": "inKeybindings && inKeybindingsSearch" },
    { "key": "escape",                "command": "keybindings.editor.rejectWhenExpression",
                                         "when": "inKeybindings && whenFocus && !suggestWidgetVisible" },
    { "key": "cmd+backspace",         "command": "keybindings.editor.removeKeybinding",
                                         "when": "inKeybindings && keybindingFocus && !inputFocus" },
    { "key": "cmd+f",                 "command": "keybindings.editor.searchKeybindings",
                                         "when": "inKeybindings" },
    { "key": "alt+cmd+p",             "command": "keybindings.editor.toggleSortByPrecedence",
                                         "when": "inKeybindings" },
    { "key": "escape",                "command": "list.clear",
                                         "when": "listFocus && listHasSelectionOrFocus && !inputFocus" },
    { "key": "escape",                "command": "list.closeFind",
                                         "when": "listFocus && treeFindOpen" },
    { "key": "cmd+up",                "command": "list.collapse",
                                         "when": "listFocus && treeElementCanCollapse && !inputFocus || listFocus && treeElementHasParent && !inputFocus" },
    { "key": "left",                  "command": "list.collapse",
                                         "when": "listFocus && treeElementCanCollapse && !inputFocus || listFocus && treeElementHasParent && !inputFocus" },
    { "key": "shift+cmd+up",          "command": "list.collapseAll",
                                         "when": "listFocus && !inputFocus" },
    { "key": "cmd+left",              "command": "list.collapseAll",
                                         "when": "listFocus && !inputFocus" },
    { "key": "right",                 "command": "list.expand",
                                         "when": "listFocus && treeElementCanExpand && !inputFocus || listFocus && treeElementHasChild && !inputFocus" },
    { "key": "shift+down",            "command": "list.expandSelectionDown",
                                         "when": "listFocus && listSupportsMultiselect && !inputFocus" },
    { "key": "shift+up",              "command": "list.expandSelectionUp",
                                         "when": "listFocus && listSupportsMultiselect && !inputFocus" },
    { "key": "f3",                    "command": "list.find",
                                         "when": "listFocus && listSupportsFind" },
    { "key": "cmd+f",                 "command": "list.find",
                                         "when": "listFocus && listSupportsFind" },
    { "key": "ctrl+n",                "command": "list.focusDown",
                                         "when": "listFocus && !inputFocus" },
    { "key": "down",                  "command": "list.focusDown",
                                         "when": "listFocus && !inputFocus" },
    { "key": "home",                  "command": "list.focusFirst",
                                         "when": "listFocus && !inputFocus" },
    { "key": "end",                   "command": "list.focusLast",
                                         "when": "listFocus && !inputFocus" },
    { "key": "pagedown",              "command": "list.focusPageDown",
                                         "when": "listFocus && !inputFocus" },
    { "key": "pageup",                "command": "list.focusPageUp",
                                         "when": "listFocus && !inputFocus" },
    { "key": "ctrl+p",                "command": "list.focusUp",
                                         "when": "listFocus && !inputFocus" },
    { "key": "up",                    "command": "list.focusUp",
                                         "when": "listFocus && !inputFocus" },
    { "key": "cmd+down",              "command": "list.scrollDown",
                                         "when": "listFocus && !inputFocus" },
    { "key": "cmd+up",                "command": "list.scrollUp",
                                         "when": "listFocus && !inputFocus" },
    { "key": "cmd+down",              "command": "list.select",
                                         "when": "listFocus && !inputFocus" },
    { "key": "enter",                 "command": "list.select",
                                         "when": "listFocus && !inputFocus" },
    { "key": "cmd+a",                 "command": "list.selectAll",
                                         "when": "listFocus && listSupportsMultiselect && !inputFocus" },
    { "key": "space",                 "command": "list.toggleExpand",
                                         "when": "listFocus && !inputFocus" },
    { "key": "shift+cmd+enter",       "command": "list.toggleSelection",
                                         "when": "listFocus && !inputFocus" },
    { "key": "y",                     "command": "notebook.cell.changeToCode",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'" },
    { "key": "m",                     "command": "notebook.cell.changeToMarkdown",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'" },
    { "key": "alt+delete",            "command": "notebook.cell.clearOutputs",
                                         "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus" },
    { "key": "cmd+k cmd+c",           "command": "notebook.cell.collapseCellInput",
                                         "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed" },
    { "key": "cmd+k t",               "command": "notebook.cell.collapseCellOutput",
                                         "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed" },
    { "key": "shift+alt+down",        "command": "notebook.cell.copyDown",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "shift+alt+up",          "command": "notebook.cell.copyUp",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "cmd+backspace",         "command": "notebook.cell.delete",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "shift+alt+d",           "command": "notebook.cell.detectLanguage",
                                         "when": "notebookCellEditable && notebookEditable" },
    { "key": "enter",                 "command": "notebook.cell.edit",
                                         "when": "notebookCellListFocused && notebookEditable && !inputFocus" },
    { "key": "cmd+k cmd+c",           "command": "notebook.cell.expandCellInput",
                                         "when": "notebookCellInputIsCollapsed && notebookCellListFocused" },
    { "key": "cmd+k t",               "command": "notebook.cell.expandCellOutput",
                                         "when": "notebookCellListFocused && notebookCellOutputIsCollapsed" },
    { "key": "ctrl+cmd+down",         "command": "notebook.cell.focusInOutput",
                                         "when": "notebookCellHasOutputs && notebookEditorFocused" },
    { "key": "ctrl+cmd+up",           "command": "notebook.cell.focusOutOutput",
                                         "when": "notebookEditorFocused && notebookOutputFocused" },
    { "key": "shift+cmd+enter",       "command": "notebook.cell.insertCodeCellAbove",
                                         "when": "notebookCellListFocused && !inputFocus" },
    { "key": "cmd+enter",             "command": "notebook.cell.insertCodeCellBelow",
                                         "when": "notebookCellListFocused && !inputFocus" },
    { "key": "ctrl+shift+alt+j",      "command": "notebook.cell.joinAbove",
                                         "when": "notebookEditorFocused" },
    { "key": "ctrl+alt+j",            "command": "notebook.cell.joinBelow",
                                         "when": "notebookEditorFocused" },
    { "key": "alt+down",              "command": "notebook.cell.moveDown",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "alt+up",                "command": "notebook.cell.moveUp",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "cmd+k ctrl+alt+cmd+7",  "command": "notebook.cell.split",
                                         "when": "editorTextFocus && notebookCellEditable && notebookEditable && notebookEditorFocused" },
    { "key": "ctrl+l",                "command": "notebook.centerActiveCell",
                                         "when": "notebookEditorFocused" },
    { "key": "alt+f3",                "command": "notebook.diff.action.next",
                                         "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'" },
    { "key": "shift+alt+f3",          "command": "notebook.diff.action.previous",
                                         "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'" },
    { "key": "cmd+f",                 "command": "notebook.find",
                                         "when": "notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.interactive' || notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "cmd+down",              "command": "notebook.focusBottom",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "down",                  "command": "notebook.focusNextEditor",
                                         "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !notebookCellMarkdownEditMode && notebookCellType == 'markup'" },
    { "key": "ctrl+cmd+down",         "command": "notebook.focusNextEditor",
                                         "when": "notebookEditorFocused && notebookOutputFocused" },
    { "key": "up",                    "command": "notebook.focusPreviousEditor",
                                         "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !notebookCellMarkdownEditMode && notebookCellType == 'markup'" },
    { "key": "cmd+up",                "command": "notebook.focusTop",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "left",                  "command": "notebook.fold",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "shift+alt+f",           "command": "notebook.format",
                                         "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "escape",                "command": "notebook.hideFind",
                                         "when": "notebookEditorFocused && notebookFindWidgetFocused" },
    { "key": "right",                 "command": "notebook.unfold",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "cmd+backspace",         "command": "notification.clear",
                                         "when": "notificationFocus" },
    { "key": "left",                  "command": "notification.collapse",
                                         "when": "notificationFocus" },
    { "key": "right",                 "command": "notification.expand",
                                         "when": "notificationFocus" },
    { "key": "enter",                 "command": "notification.toggle",
                                         "when": "notificationFocus" },
    { "key": "space",                 "command": "notification.toggle",
                                         "when": "notificationFocus" },
    { "key": "home",                  "command": "notifications.focusFirstToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "pageup",                "command": "notifications.focusFirstToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "end",                   "command": "notifications.focusLastToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "pagedown",              "command": "notifications.focusLastToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "down",                  "command": "notifications.focusNextToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "up",                    "command": "notifications.focusPreviousToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "escape",                "command": "problems.action.clearFilterText",
                                         "when": "problemsFilterFocus" },
    { "key": "cmd+c",                 "command": "problems.action.copy",
                                         "when": "problemsVisibility && !relatedInformationFocus && focusedView == 'workbench.panel.markers.view'" },
    { "key": "cmd+f",                 "command": "problems.action.focusFilter",
                                         "when": "focusedView == 'workbench.panel.markers.view'" },
    { "key": "cmd+down",              "command": "problems.action.focusProblemsFromFilter",
                                         "when": "problemsFilterFocus" },
    { "key": "cmd+down",              "command": "problems.action.open",
                                         "when": "problemFocus" },
    { "key": "enter",                 "command": "problems.action.open",
                                         "when": "problemFocus" },
    { "key": "ctrl+enter",            "command": "problems.action.openToSide",
                                         "when": "problemFocus" },
    { "key": "cmd+[Period]",          "command": "problems.action.showQuickFixes",
                                         "when": "problemFocus" },
    { "key": "space",                 "command": "refactorPreview.toggleCheckedState",
                                         "when": "listFocus && refactorPreview.enabled && !inputFocus" },
    { "key": "alt+cmd+r",             "command": "revealFileInOS",
                                         "when": "!editorFocus" },
    { "key": "cmd+down",              "command": "revealReference",
                                         "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand" },
    { "key": "enter",                 "command": "revealReference",
                                         "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand" },
    { "key": "alt+cmd+s",             "command": "saveAll" },
    { "key": "cmd+enter",             "command": "scm.acceptInput",
                                         "when": "scmRepository" },
    { "key": "alt+down",              "command": "scm.forceViewNextCommit",
                                         "when": "scmRepository" },
    { "key": "alt+up",                "command": "scm.forceViewPreviousCommit",
                                         "when": "scmRepository" },
    { "key": "down",                  "command": "scm.viewNextCommit",
                                         "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible" },
    { "key": "up",                    "command": "scm.viewPreviousCommit",
                                         "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible" },
    { "key": "escape",                "command": "search.action.cancel",
                                         "when": "listFocus && searchViewletVisible && !inputFocus && searchState != '0'" },
    { "key": "cmd+c",                 "command": "search.action.copyMatch",
                                         "when": "fileMatchOrMatchFocus" },
    { "key": "alt+cmd+c",             "command": "search.action.copyPath",
                                         "when": "fileMatchOrFolderMatchWithResourceFocus" },
    { "key": "f4",                    "command": "search.action.focusNextSearchResult",
                                         "when": "hasSearchResult || inSearchEditor" },
    { "key": "shift+f4",              "command": "search.action.focusPreviousSearchResult",
                                         "when": "hasSearchResult || inSearchEditor" },
    { "key": "cmd+up",                "command": "search.action.focusSearchFromResults",
                                         "when": "firstMatchFocus && searchViewletVisible" },
    { "key": "cmd+enter",             "command": "search.action.openInEditor",
                                         "when": "hasSearchResult && searchViewletFocus" },
    { "key": "cmd+down",              "command": "search.action.openResult",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "enter",                 "command": "search.action.openResult",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "ctrl+enter",            "command": "search.action.openResultToSide",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "cmd+backspace",         "command": "search.action.remove",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "shift+cmd+1",           "command": "search.action.replace",
                                         "when": "matchFocus && replaceActive && searchViewletVisible" },
    { "key": "alt+cmd+enter",         "command": "search.action.replaceAll",
                                         "when": "replaceActive && searchViewletVisible && !findWidgetVisible" },
    { "key": "shift+cmd+enter",       "command": "search.action.replaceAllInFile",
                                         "when": "fileMatchFocus && replaceActive && searchViewletVisible" },
    { "key": "shift+cmd+1",           "command": "search.action.replaceAllInFile",
                                         "when": "fileMatchFocus && replaceActive && searchViewletVisible" },
    { "key": "shift+cmd+enter",       "command": "search.action.replaceAllInFolder",
                                         "when": "folderMatchFocus && replaceActive && searchViewletVisible" },
    { "key": "shift+cmd+1",           "command": "search.action.replaceAllInFolder",
                                         "when": "folderMatchFocus && replaceActive && searchViewletVisible" },
    { "key": "shift+alt+f",           "command": "search.action.restrictSearchToFolder",
                                         "when": "folderMatchWithResourceFocus && searchViewletVisible" },
    { "key": "cmd+down",              "command": "search.focus.nextInputBox",
                                         "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible" },
    { "key": "cmd+up",                "command": "search.focus.previousInputBox",
                                         "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus" },
    { "key": "shift+cmd+l",           "command": "selectAllSearchEditorMatches",
                                         "when": "inSearchEditor" },
    { "key": "escape",                "command": "settings.action.focusLevelUp",
                                         "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch" },
    { "key": "enter",                 "command": "settings.action.focusSettingControl",
                                         "when": "settingRowFocus" },
    { "key": "down",                  "command": "settings.action.focusSettingsFromSearch",
                                         "when": "inSettingsSearch && !suggestWidgetVisible" },
    { "key": "enter",                 "command": "settings.action.focusSettingsList",
                                         "when": "inSettingsEditor && settingsTocRowFocus" },
    { "key": "left",                  "command": "settings.action.focusTOC",
                                         "when": "inSettingsEditor && settingRowFocus" },
    { "key": "shift+f9",              "command": "settings.action.showContextMenu",
                                         "when": "inSettingsEditor" },
    { "key": "shift+cmd+[Comma] cmd+x", "command": "testing.cancelRun" },
    { "key": "shift+cmd+[Comma] cmd+a", "command": "testing.debugAll" },
    { "key": "shift+cmd+[Comma] cmd+c", "command": "testing.debugAtCursor",
                                         "when": "editorTextFocus" },
    { "key": "shift+cmd+[Comma] cmd+f", "command": "testing.debugCurrentFile",
                                         "when": "editorTextFocus" },
    { "key": "shift+cmd+[Comma] cmd+e", "command": "testing.debugFailTests" },
    { "key": "shift+cmd+[Comma] cmd+l", "command": "testing.debugLastRun" },
    { "key": "shift+cmd+[Comma] cmd+m", "command": "testing.openOutputPeek" },
    { "key": "shift+cmd+[Comma] e",   "command": "testing.reRunFailTests" },
    { "key": "shift+cmd+[Comma] l",   "command": "testing.reRunLastRun" },
    { "key": "shift+cmd+[Comma] cmd+r", "command": "testing.refreshTests",
                                         "when": "testing.canRefresh" },
    { "key": "shift+cmd+[Comma] a",   "command": "testing.runAll" },
    { "key": "shift+cmd+[Comma] c",   "command": "testing.runAtCursor",
                                         "when": "editorTextFocus" },
    { "key": "shift+cmd+[Comma] f",   "command": "testing.runCurrentFile",
                                         "when": "editorTextFocus" },
    { "key": "shift+cmd+[Comma] cmd+o", "command": "testing.showMostRecentOutput",
                                         "when": "testing.hasAnyResults" },
    { "key": "shift+cmd+[Comma] cmd+i", "command": "testing.toggleInlineTestOutput" },
    { "key": "alt+h",                 "command": "testing.toggleTestingPeekHistory",
                                         "when": "testing.isPeekVisible" },
    { "key": "alt+cmd+c",             "command": "toggleSearchCaseSensitive",
                                         "when": "searchViewletFocus && !fileMatchOrFolderMatchFocus" },
    { "key": "alt+cmd+c",             "command": "toggleSearchEditorCaseSensitive",
                                         "when": "inSearchEditor && searchInputBoxFocus" },
    { "key": "alt+cmd+l",             "command": "toggleSearchEditorContextLines",
                                         "when": "inSearchEditor" },
    { "key": "alt+cmd+r",             "command": "toggleSearchEditorRegex",
                                         "when": "inSearchEditor && searchInputBoxFocus" },
    { "key": "alt+cmd+w",             "command": "toggleSearchEditorWholeWord",
                                         "when": "inSearchEditor && searchInputBoxFocus" },
    { "key": "alt+cmd+p",             "command": "toggleSearchPreserveCase",
                                         "when": "searchViewletFocus" },
    { "key": "alt+cmd+r",             "command": "toggleSearchRegex",
                                         "when": "searchViewletFocus" },
    { "key": "alt+cmd+w",             "command": "toggleSearchWholeWord",
                                         "when": "searchViewletFocus" },
    { "key": "ctrl+alt+cmd+n",        "command": "welcome.showNewFileEntries" },
    { "key": "cmd+w",                 "command": "workbench.action.closeActiveEditor" },
    { "key": "cmd+k cmd+w",           "command": "workbench.action.closeAllEditors" },
    { "key": "cmd+k shift+cmd+w",     "command": "workbench.action.closeAllGroups" },
    { "key": "cmd+k w",               "command": "workbench.action.closeEditorsInGroup" },
    { "key": "cmd+k f",               "command": "workbench.action.closeFolder",
                                         "when": "emptyWorkspaceSupport && workbenchState != 'empty'" },
    { "key": "cmd+w",                 "command": "workbench.action.closeGroup",
                                         "when": "activeEditorGroupEmpty && multipleEditorGroups" },
    { "key": "alt+cmd+t",             "command": "workbench.action.closeOtherEditors" },
    { "key": "shift+escape",          "command": "workbench.action.closeQuickOpen",
                                         "when": "inQuickOpen" },
    { "key": "escape",                "command": "workbench.action.closeQuickOpen",
                                         "when": "inQuickOpen" },
    { "key": "cmd+k u",               "command": "workbench.action.closeUnmodifiedEditors" },
    { "key": "shift+cmd+w",           "command": "workbench.action.closeWindow" },
    { "key": "cmd+w",                 "command": "workbench.action.closeWindow",
                                         "when": "!editorIsOpen && !multipleEditorGroups" },
    { "key": "alt+f5",                "command": "workbench.action.compareEditor.nextChange",
                                         "when": "textCompareEditorVisible" },
    { "key": "cmd+k shift+o",         "command": "workbench.action.compareEditor.openSide",
                                         "when": "inDiffEditor" },
    { "key": "shift+alt+f5",          "command": "workbench.action.compareEditor.previousChange",
                                         "when": "textCompareEditorVisible" },
    { "key": "shift+f5",              "command": "workbench.action.debug.disconnect",
                                         "when": "focusedSessionIsAttach && inDebugMode" },
    { "key": "shift+cmd+f5",          "command": "workbench.action.debug.restart",
                                         "when": "inDebugMode" },
    { "key": "ctrl+f5",               "command": "workbench.action.debug.run",
                                         "when": "debuggersAvailable && debugState != 'initializing'" },
    { "key": "f5",                    "command": "workbench.action.debug.start",
                                         "when": "debuggersAvailable && debugState == 'inactive'" },
    { "key": "cmd+f11",               "command": "workbench.action.debug.stepIntoTarget",
                                         "when": "inDebugMode && stepIntoTargetsSupported && debugState == 'stopped'" },
    { "key": "shift+f11",             "command": "workbench.action.debug.stepOut",
                                         "when": "debugState == 'stopped'" },
    { "key": "f10",                   "command": "workbench.action.debug.stepOver",
                                         "when": "debugState == 'stopped'" },
    { "key": "shift+f5",              "command": "workbench.action.debug.stop",
                                         "when": "inDebugMode && !focusedSessionIsAttach" },
    { "key": "cmd+k m",               "command": "workbench.action.editor.changeLanguageMode",
                                         "when": "!notebookEditorFocused" },
    { "key": "cmd+k p",               "command": "workbench.action.files.copyPathOfActiveFile" },
    { "key": "cmd+n",                 "command": "workbench.action.files.newUntitledFile" },
    { "key": "cmd+o",                 "command": "workbench.action.files.openFile",
                                         "when": "false" },
    { "key": "cmd+o",                 "command": "workbench.action.files.openFileFolder",
                                         "when": "isMacNative && openFolderWorkspaceSupport" },
    { "key": "cmd+o",                 "command": "workbench.action.files.openFolderViaWorkspace",
                                         "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'" },
    { "key": "cmd+o",                 "command": "workbench.action.files.openLocalFileFolder",
                                         "when": "remoteFileDialogVisible" },
    { "key": "cmd+k r",               "command": "workbench.action.files.revealActiveFileInWindows" },
    { "key": "cmd+s",                 "command": "workbench.action.files.save" },
    { "key": "shift+cmd+s",           "command": "workbench.action.files.saveAs" },
    { "key": "shift+cmd+s",           "command": "workbench.action.files.saveLocalFile",
                                         "when": "remoteFileDialogVisible" },
    { "key": "cmd+k s",               "command": "workbench.action.files.saveWithoutFormatting" },
    { "key": "cmd+k o",               "command": "workbench.action.files.showOpenedFileInNewWindow",
                                         "when": "emptyWorkspaceSupport" },
    { "key": "shift+cmd+f",           "command": "workbench.action.findInFiles" },
    { "key": "cmd+k cmd+up",          "command": "workbench.action.focusAboveGroup" },
    { "key": "cmd+k cmd+down",        "command": "workbench.action.focusBelowGroup" },
    { "key": "cmd+8",                 "command": "workbench.action.focusEighthEditorGroup" },
    { "key": "cmd+5",                 "command": "workbench.action.focusFifthEditorGroup" },
    { "key": "cmd+1",                 "command": "workbench.action.focusFirstEditorGroup" },
    { "key": "cmd+4",                 "command": "workbench.action.focusFourthEditorGroup" },
    { "key": "cmd+k cmd+left",        "command": "workbench.action.focusLeftGroup" },
    { "key": "f6",                    "command": "workbench.action.focusNextPart" },
    { "key": "shift+f6",              "command": "workbench.action.focusPreviousPart" },
    { "key": "cmd+k cmd+right",       "command": "workbench.action.focusRightGroup" },
    { "key": "cmd+2",                 "command": "workbench.action.focusSecondEditorGroup" },
    { "key": "cmd+7",                 "command": "workbench.action.focusSeventhEditorGroup" },
    { "key": "cmd+0",                 "command": "workbench.action.focusSideBar" },
    { "key": "cmd+6",                 "command": "workbench.action.focusSixthEditorGroup" },
    { "key": "cmd+3",                 "command": "workbench.action.focusThirdEditorGroup" },
    { "key": "ctrl+g",                "command": "workbench.action.gotoLine" },
    { "key": "shift+cmd+o",           "command": "workbench.action.gotoSymbol" },
    { "key": "escape",                "command": "workbench.action.hideInterfaceOverview",
                                         "when": "interfaceOverviewVisible" },
    { "key": "down",                  "command": "workbench.action.interactivePlayground.arrowDown",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "up",                    "command": "workbench.action.interactivePlayground.arrowUp",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "pagedown",              "command": "workbench.action.interactivePlayground.pageDown",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "pageup",                "command": "workbench.action.interactivePlayground.pageUp",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "cmd+k ctrl+alt+cmd+7",  "command": "workbench.action.joinEditorInGroup",
                                         "when": "sideBySideEditorActive" },
    { "key": "cmd+k enter",           "command": "workbench.action.keepEditor" },
    { "key": "cmd+k cmd+r",           "command": "workbench.action.keybindingsReference" },
    { "key": "cmd+9",                 "command": "workbench.action.lastEditorInGroup" },
    { "key": "ctrl+0",                "command": "workbench.action.lastEditorInGroup" },
    { "key": "cmd+k down",            "command": "workbench.action.moveActiveEditorGroupDown" },
    { "key": "cmd+k left",            "command": "workbench.action.moveActiveEditorGroupLeft" },
    { "key": "cmd+k right",           "command": "workbench.action.moveActiveEditorGroupRight" },
    { "key": "cmd+k up",              "command": "workbench.action.moveActiveEditorGroupUp" },
    { "key": "cmd+k shift+cmd+left",  "command": "workbench.action.moveEditorLeftInGroup" },
    { "key": "cmd+k shift+cmd+right", "command": "workbench.action.moveEditorRightInGroup" },
    { "key": "ctrl+cmd+1",            "command": "workbench.action.moveEditorToFirstGroup" },
    { "key": "ctrl+cmd+9",            "command": "workbench.action.moveEditorToLastGroup" },
    { "key": "ctrl+cmd+right",        "command": "workbench.action.moveEditorToNextGroup" },
    { "key": "ctrl+cmd+left",         "command": "workbench.action.moveEditorToPreviousGroup" },
    { "key": "ctrl+-",                "command": "workbench.action.navigateBack",
                                         "when": "canNavigateBack" },
    { "key": "ctrl+shift+-",          "command": "workbench.action.navigateForward",
                                         "when": "canNavigateForward" },
    { "key": "cmd+k cmd+q",           "command": "workbench.action.navigateToLastEditLocation" },
    { "key": "shift+cmd+n",           "command": "workbench.action.newWindow" },
    { "key": "ctrl+alt+cmd+9",        "command": "workbench.action.nextEditor" },
    { "key": "alt+cmd+right",         "command": "workbench.action.nextEditor" },
    { "key": "cmd+k alt+cmd+right",   "command": "workbench.action.nextEditorInGroup" },
    { "key": "ctrl+1",                "command": "workbench.action.openEditorAtIndex1" },
    { "key": "ctrl+2",                "command": "workbench.action.openEditorAtIndex2" },
    { "key": "ctrl+3",                "command": "workbench.action.openEditorAtIndex3" },
    { "key": "ctrl+4",                "command": "workbench.action.openEditorAtIndex4" },
    { "key": "ctrl+5",                "command": "workbench.action.openEditorAtIndex5" },
    { "key": "ctrl+6",                "command": "workbench.action.openEditorAtIndex6" },
    { "key": "ctrl+7",                "command": "workbench.action.openEditorAtIndex7" },
    { "key": "ctrl+8",                "command": "workbench.action.openEditorAtIndex8" },
    { "key": "ctrl+9",                "command": "workbench.action.openEditorAtIndex9" },
    { "key": "cmd+k cmd+s",           "command": "workbench.action.openGlobalKeybindings" },
    { "key": "ctrl+r",                "command": "workbench.action.openRecent" },
    { "key": "cmd+[Comma]",           "command": "workbench.action.openSettings" },
    { "key": "shift+cmd+u",           "command": "workbench.action.output.toggleOutput",
                                         "when": "workbench.panel.output.active" },
    { "key": "cmd+k shift+enter",     "command": "workbench.action.pinEditor",
                                         "when": "!activeEditorIsPinned" },
    { "key": "ctrl+alt+cmd+8",        "command": "workbench.action.previousEditor" },
    { "key": "alt+cmd+left",          "command": "workbench.action.previousEditor" },
    { "key": "cmd+k alt+cmd+left",    "command": "workbench.action.previousEditorInGroup" },
    { "key": "cmd+p",                 "command": "workbench.action.quickOpen" },
    { "key": "ctrl+shift+tab",        "command": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
                                         "when": "!activeEditorGroupEmpty" },
    { "key": "ctrl+tab",              "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
                                         "when": "!activeEditorGroupEmpty" },
    { "key": "ctrl+q",                "command": "workbench.action.quickOpenView" },
    { "key": "cmd+q",                 "command": "workbench.action.quit" },
    { "key": "alt+cmd+o",             "command": "workbench.action.remote.showMenu" },
    { "key": "shift+cmd+t",           "command": "workbench.action.reopenClosedEditor" },
    { "key": "shift+cmd+h",           "command": "workbench.action.replaceInFiles" },
    { "key": "shift+cmd+j",           "command": "workbench.action.search.toggleQueryDetails",
                                         "when": "inSearchEditor || searchViewletFocus" },
    { "key": "cmd+k cmd+t",           "command": "workbench.action.selectTheme" },
    { "key": "alt+cmd+tab",           "command": "workbench.action.showAllEditors" },
    { "key": "cmd+t",                 "command": "workbench.action.showAllSymbols" },
    { "key": "f1",                    "command": "workbench.action.showCommands" },
    { "key": "shift+cmd+p",           "command": "workbench.action.showCommands" },
    { "key": "cmd+k cmd+i",           "command": "workbench.action.showTreeHover",
                                         "when": "customTreeView && listFocus && !inputFocus" },
    { "key": "ctrl+shift+alt+cmd+7",  "command": "workbench.action.splitEditor" },
    { "key": "cmd+k ctrl+alt+cmd+7",  "command": "workbench.action.splitEditorInGroup",
                                         "when": "activeEditorCanSplitInGroup" },
    { "key": "cmd+k ctrl+shift+alt+cmd+7", "command": "workbench.action.splitEditorOrthogonal" },
    { "key": "ctrl+w",                "command": "workbench.action.switchWindow" },
    { "key": "shift+cmd+b",           "command": "workbench.action.tasks.build",
                                         "when": "taskCommandsRegistered" },
    { "key": "escape",                "command": "workbench.action.terminal.clearSelection",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocus && terminalProcessSupported && terminalTextSelected && !terminalFindVisible" },
    { "key": "cmd+c",                 "command": "workbench.action.terminal.copySelection",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected" },
    { "key": "f3",                    "command": "workbench.action.terminal.findNext",
                                         "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "cmd+g",                 "command": "workbench.action.terminal.findNext",
                                         "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "shift+enter",           "command": "workbench.action.terminal.findNext",
                                         "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported" },
    { "key": "shift+f3",              "command": "workbench.action.terminal.findPrevious",
                                         "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "shift+cmd+g",           "command": "workbench.action.terminal.findPrevious",
                                         "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "enter",                 "command": "workbench.action.terminal.findPrevious",
                                         "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported" },
    { "key": "shift+tab",             "command": "workbench.action.terminal.focusAccessibleBuffer",
                                         "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported" },
    { "key": "cmd+f",                 "command": "workbench.action.terminal.focusFind",
                                         "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+alt+cmd+9",        "command": "workbench.action.terminal.focusNext",
                                         "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus" },
    { "key": "alt+cmd+down",          "command": "workbench.action.terminal.focusNextPane",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "alt+cmd+right",         "command": "workbench.action.terminal.focusNextPane",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+alt+cmd+8",        "command": "workbench.action.terminal.focusPrevious",
                                         "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus" },
    { "key": "alt+cmd+up",            "command": "workbench.action.terminal.focusPreviousPane",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "alt+cmd+left",          "command": "workbench.action.terminal.focusPreviousPane",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+alt+cmd+7",        "command": "workbench.action.terminal.focusTabs",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
    { "key": "cmd+g",                 "command": "workbench.action.terminal.goToRecentDirectory",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "shift+escape",          "command": "workbench.action.terminal.hideFind",
                                         "when": "terminalFindVisible && terminalFocus && terminalHasBeenCreated || terminalFindVisible && terminalFocus && terminalProcessSupported" },
    { "key": "escape",                "command": "workbench.action.terminal.hideFind",
                                         "when": "terminalFindVisible && terminalFocus && terminalHasBeenCreated || terminalFindVisible && terminalFocus && terminalProcessSupported" },
    { "key": "cmd+w",                 "command": "workbench.action.terminal.killEditor",
                                         "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated && resourceScheme == 'vscode-terminal' || terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'" },
    { "key": "delete",                "command": "workbench.action.terminal.killInstance",
                                         "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
    { "key": "cmd+backspace",         "command": "workbench.action.terminal.killInstance",
                                         "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
    { "key": "shift+cmd+c",           "command": "workbench.action.terminal.openNativeConsole",
                                         "when": "!terminalFocus" },
    { "key": "cmd+v",                 "command": "workbench.action.terminal.paste",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "enter",                 "command": "workbench.action.terminal.renameInstance",
                                         "when": "terminalHasBeenCreated && terminalTabsFocus && terminalTabsSingularSelection || terminalProcessSupported && terminalTabsFocus && terminalTabsSingularSelection" },
    { "key": "ctrl+cmd+down",         "command": "workbench.action.terminal.resizePaneDown",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+cmd+left",         "command": "workbench.action.terminal.resizePaneLeft",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+cmd+right",        "command": "workbench.action.terminal.resizePaneRight",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+cmd+up",           "command": "workbench.action.terminal.resizePaneUp",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+r",                "command": "workbench.action.terminal.runRecentCommand",
                                         "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+alt+r",            "command": "workbench.action.terminal.runRecentCommand",
                                         "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
    { "key": "alt+cmd+pagedown",      "command": "workbench.action.terminal.scrollDown",
                                         "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "pagedown",              "command": "workbench.action.terminal.scrollDownPage",
                                         "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "cmd+end",               "command": "workbench.action.terminal.scrollToBottom",
                                         "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "cmd+down",              "command": "workbench.action.terminal.scrollToNextCommand",
                                         "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
    { "key": "cmd+up",                "command": "workbench.action.terminal.scrollToPreviousCommand",
                                         "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
    { "key": "cmd+home",              "command": "workbench.action.terminal.scrollToTop",
                                         "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "alt+cmd+pageup",        "command": "workbench.action.terminal.scrollUp",
                                         "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "pageup",                "command": "workbench.action.terminal.scrollUpPage",
                                         "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "cmd+a",                 "command": "workbench.action.terminal.selectAll",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "shift+cmd+down",        "command": "workbench.action.terminal.selectToNextCommand",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "shift+cmd+up",          "command": "workbench.action.terminal.selectToPreviousCommand",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+space",            "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                         "args": {"text":"\u001b[24~a"} },
    { "key": "alt+space",             "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                         "args": {"text":"\u001b[24~b"} },
    { "key": "shift+enter",           "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                         "args": {"text":"\u001b[24~c"} },
    { "key": "shift+cmd+right",       "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                         "args": {"text":"\u001b[24~d"} },
    { "key": "ctrl+space",            "command": "workbench.action.terminal.sendSequence",
                                         "when": "config.terminal.integrated.shellIntegration.suggestEnabled && terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                         "args": {"text":"\u001b[24~e"} },
    { "key": "shift+cmd+left",        "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus && terminalShellType == 'pwsh'",
                                         "args": {"text":"\u001b[1;2H"} },
    { "key": "ctrl+alt+r",            "command": "workbench.action.terminal.sendSequence",
                                         "when": "accessibilityModeEnabled && terminalFocus",
                                         "args": {"text":"\u0012"} },
    { "key": "ctrl+alt+g",            "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u0007"} },
    { "key": "alt+backspace",         "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u0017"} },
    { "key": "alt+delete",            "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u001bd"} },
    { "key": "cmd+backspace",         "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u0015"} },
    { "key": "cmd+left",              "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u0001"} },
    { "key": "cmd+right",             "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u0005"} },
    { "key": "ctrl+shift+2",          "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u0000"} },
    { "key": "ctrl+shift+6",          "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u001e"} },
    { "key": "ctrl+shift+7",          "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u001f"} },
    { "key": "alt+f1",                "command": "workbench.action.terminal.showAccessibilityHelp",
                                         "when": "terminalFocus && terminalProcessSupported" },
    { "key": "cmd+[Period]",          "command": "workbench.action.terminal.showQuickFixes",
                                         "when": "terminalFocus" },
    { "key": "alt+z",                 "command": "workbench.action.terminal.sizeToContentWidth",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen || terminalFocus && terminalIsOpen && terminalProcessSupported" },
    { "key": "ctrl+shift+5",          "command": "workbench.action.terminal.split",
                                         "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile" },
    { "key": "ctrl+shift+alt+cmd+7",  "command": "workbench.action.terminal.split",
                                         "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile" },
    { "key": "ctrl+shift+5",          "command": "workbench.action.terminal.splitInstance",
                                         "when": "terminalProcessSupported && terminalTabsFocus" },
    { "key": "ctrl+shift+alt+cmd+7",  "command": "workbench.action.terminal.splitInstance",
                                         "when": "terminalProcessSupported && terminalTabsFocus" },
    { "key": "alt+cmd+c",             "command": "workbench.action.terminal.toggleFindCaseSensitive",
                                         "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "alt+cmd+r",             "command": "workbench.action.terminal.toggleFindRegex",
                                         "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "alt+cmd+w",             "command": "workbench.action.terminal.toggleFindWholeWord",
                                         "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "ctrl+shift+[Equal]",    "command": "workbench.action.terminal.toggleTerminal",
                                         "when": "terminal.active" },
    { "key": "alt+cmd+b",             "command": "workbench.action.toggleAuxiliaryBar" },
    { "key": "alt+cmd+0",             "command": "workbench.action.toggleEditorGroupLayout" },
    { "key": "ctrl+cmd+f",            "command": "workbench.action.toggleFullScreen",
                                         "when": "!isIOS" },
    { "key": "cmd+j",                 "command": "workbench.action.togglePanel" },
    { "key": "cmd+b",                 "command": "workbench.action.toggleSidebarVisibility" },
    { "key": "cmd+k z",               "command": "workbench.action.toggleZenMode" },
    { "key": "cmd+k shift+enter",     "command": "workbench.action.unpinEditor",
                                         "when": "activeEditorIsPinned" },
    { "key": "cmd+numpad_add",        "command": "workbench.action.zoomIn" },
    { "key": "cmd+[BracketRight]",    "command": "workbench.action.zoomIn" },
    { "key": "shift+cmd+0",           "command": "workbench.action.zoomIn" },
    { "key": "cmd+numpad_subtract",   "command": "workbench.action.zoomOut" },
    { "key": "shift+cmd+-",           "command": "workbench.action.zoomOut" },
    { "key": "cmd+-",                 "command": "workbench.action.zoomOut" },
    { "key": "cmd+numpad0",           "command": "workbench.action.zoomReset" },
    { "key": "shift+cmd+m",           "command": "workbench.actions.view.problems",
                                         "when": "workbench.panel.markers.view.active" },
    { "key": "escape",                "command": "workbench.banner.focusBanner",
                                         "when": "bannerFocused" },
    { "key": "down",                  "command": "workbench.banner.focusNextAction",
                                         "when": "bannerFocused" },
    { "key": "right",                 "command": "workbench.banner.focusNextAction",
                                         "when": "bannerFocused" },
    { "key": "up",                    "command": "workbench.banner.focusPreviousAction",
                                         "when": "bannerFocused" },
    { "key": "left",                  "command": "workbench.banner.focusPreviousAction",
                                         "when": "bannerFocused" },
    { "key": "shift+cmd+y",           "command": "workbench.debug.action.toggleRepl",
                                         "when": "workbench.panel.repl.view.active" },
    { "key": "cmd+k c",               "command": "workbench.files.action.compareWithClipboard" },
    { "key": "cmd+k d",               "command": "workbench.files.action.compareWithSaved" },
    { "key": "cmd+k e",               "command": "workbench.files.action.focusOpenEditorsView",
                                         "when": "workbench.explorer.openEditorsView.active" },
    { "key": "escape",                "command": "workbench.statusBar.clearFocus",
                                         "when": "statusBarFocused" },
    { "key": "home",                  "command": "workbench.statusBar.focusFirst",
                                         "when": "statusBarFocused" },
    { "key": "end",                   "command": "workbench.statusBar.focusLast",
                                         "when": "statusBarFocused" },
    { "key": "down",                  "command": "workbench.statusBar.focusNext",
                                         "when": "statusBarFocused" },
    { "key": "right",                 "command": "workbench.statusBar.focusNext",
                                         "when": "statusBarFocused" },
    { "key": "up",                    "command": "workbench.statusBar.focusPrevious",
                                         "when": "statusBarFocused" },
    { "key": "left",                  "command": "workbench.statusBar.focusPrevious",
                                         "when": "statusBarFocused" },
    { "key": "shift+cmd+d",           "command": "workbench.view.debug",
                                         "when": "viewContainer.workbench.view.debug.enabled" },
    { "key": "shift+cmd+e",           "command": "workbench.view.explorer",
                                         "when": "viewContainer.workbench.view.explorer.enabled" },
    { "key": "shift+cmd+x",           "command": "workbench.view.extensions",
                                         "when": "viewContainer.workbench.view.extensions.enabled" },
    { "key": "ctrl+shift+g",          "command": "workbench.view.scm",
                                         "when": "workbench.scm.active" },
    { "key": "shift+cmd+f",           "command": "workbench.view.search",
                                         "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/" },
    { "key": "alt+right",             "command": "breadcrumbs.focusNextWithPicker",
                                         "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus" },
    { "key": "alt+left",              "command": "breadcrumbs.focusPreviousWithPicker",
                                         "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus" },
    { "key": "escape",                "command": "breadcrumbs.selectEditor",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "cmd+k down",            "command": "views.moveViewDown",
                                         "when": "focusedView != ''" },
    { "key": "cmd+k left",            "command": "views.moveViewLeft",
                                         "when": "focusedView != ''" },
    { "key": "cmd+k right",           "command": "views.moveViewRight",
                                         "when": "focusedView != ''" },
    { "key": "cmd+k up",              "command": "views.moveViewUp",
                                         "when": "focusedView != ''" },
    { "key": "ctrl+alt+cmd+9",        "command": "workbench.action.debug.nextConsole",
                                         "when": "inDebugRepl" },
    { "key": "ctrl+alt+cmd+8",        "command": "workbench.action.debug.prevConsole",
                                         "when": "inDebugRepl" },
    { "key": "tab",                   "command": "workbench.action.terminal.acceptSelectedSuggestion",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "enter",                 "command": "workbench.action.terminal.acceptSelectedSuggestion",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "cmd+k",                 "command": "workbench.action.terminal.clear",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "escape",                "command": "workbench.action.terminal.hideSuggestWidget",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "shift+cmd+o",           "command": "workbench.action.terminal.openDetectedLink",
                                         "when": "terminalFocus && terminalHasBeenCreated" },
    { "key": "pagedown",              "command": "workbench.action.terminal.selectNextPageSuggestion",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "down",                  "command": "workbench.action.terminal.selectNextSuggestion",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "pageup",                "command": "workbench.action.terminal.selectPrevPageSuggestion",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "up",                    "command": "workbench.action.terminal.selectPrevSuggestion",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "f6",                    "command": "workbench.action.debug.pause",
                                         "when": "debugState == 'running'" },
    { "key": "enter",                 "command": "debug.renameWatchExpression",
                                         "when": "watchExpressionsFocused" },
    { "key": "enter",                 "command": "debug.setVariable",
                                         "when": "variablesFocused" },
    { "key": "space",                 "command": "debug.toggleBreakpoint",
                                         "when": "breakpointsFocused && !inputFocus" },
    { "key": "alt+cmd+backspace",     "command": "deleteFile",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
    { "key": "cmd+backspace",         "command": "deleteFile",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus" },
    { "key": "escape",                "command": "editor.closeCallHierarchy",
                                         "when": "callHierarchyVisible && !config.editor.stablePeek" },
    { "key": "escape",                "command": "editor.closeTypeHierarchy",
                                         "when": "typeHierarchyVisible && !config.editor.stablePeek" },
    { "key": "cmd+down",              "command": "explorer.openAndPassFocus",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus" },
    { "key": "escape",                "command": "filesExplorer.cancelCut",
                                         "when": "explorerResourceCut && explorerViewletVisible && filesExplorerFocus && !inputFocus" },
    { "key": "cmd+c",                 "command": "filesExplorer.copy",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus" },
    { "key": "cmd+x",                 "command": "filesExplorer.cut",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus" },
    { "key": "space",                 "command": "filesExplorer.openFilePreserveFocus",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus" },
    { "key": "cmd+v",                 "command": "filesExplorer.paste",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
    { "key": "home",                  "command": "firstCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus" },
    { "key": "end",                   "command": "lastCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus" },
    { "key": "delete",                "command": "moveFileToTrash",
                                         "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
    { "key": "cmd+backspace",         "command": "moveFileToTrash",
                                         "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
    { "key": "right",                 "command": "nextCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus" },
    { "key": "left",                  "command": "previousCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus" },
    { "key": "delete",                "command": "remote.tunnel.closeInline",
                                         "when": "tunnelCloseable && tunnelViewFocus" },
    { "key": "cmd+backspace",         "command": "remote.tunnel.closeInline",
                                         "when": "tunnelCloseable && tunnelViewFocus" },
    { "key": "cmd+c",                 "command": "remote.tunnel.copyAddressInline",
                                         "when": "tunnelViewFocus && tunnelType == 'Detected' && tunnelViewMultiSelection == 'undefined' || tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'" },
    { "key": "enter",                 "command": "remote.tunnel.label",
                                         "when": "tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'" },
    { "key": "enter",                 "command": "renameFile",
                                         "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus" },
    { "key": "f5",                    "command": "workbench.action.debug.continue",
                                         "when": "debugState == 'stopped'" },
    { "key": "f11",                   "command": "workbench.action.debug.stepInto",
                                         "when": "debugState != 'inactive'" },
    { "key": "shift+escape",          "command": "closeReferenceSearch",
                                         "when": "referenceSearchVisible && !config.editor.stablePeek" },
    { "key": "escape",                "command": "closeReferenceSearch",
                                         "when": "referenceSearchVisible && !config.editor.stablePeek" },
    { "key": "escape",                "command": "notifications.hideList",
                                         "when": "notificationCenterVisible" },
    { "key": "ctrl+-",                "command": "workbench.action.quickInputBack",
                                         "when": "inQuickOpen" },
    { "key": "ctrl+tab",              "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
                                         "when": "inEditorsPicker && inQuickOpen" },
    { "key": "cmd+p",                 "command": "workbench.action.quickOpenNavigateNextInFilePicker",
                                         "when": "inFilesPicker && inQuickOpen" },
    { "key": "ctrl+r",                "command": "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
                                         "when": "inQuickOpen && inRecentFilesPicker" },
    { "key": "ctrl+q",                "command": "workbench.action.quickOpenNavigateNextInViewPicker",
                                         "when": "inQuickOpen && inViewsPicker" },
    { "key": "ctrl+shift+tab",        "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
                                         "when": "inEditorsPicker && inQuickOpen" },
    { "key": "shift+cmd+p",           "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
                                         "when": "inFilesPicker && inQuickOpen" },
    { "key": "ctrl+shift+r",          "command": "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
                                         "when": "inQuickOpen && inRecentFilesPicker" },
    { "key": "ctrl+shift+q",          "command": "workbench.action.quickOpenNavigatePreviousInViewPicker",
                                         "when": "inQuickOpen && inViewsPicker" },
    { "key": "ctrl+n",                "command": "workbench.action.quickOpenSelectNext",
                                         "when": "inQuickOpen" },
    { "key": "ctrl+p",                "command": "workbench.action.quickOpenSelectPrevious",
                                         "when": "inQuickOpen" },
    { "key": "cmd+r",                 "command": "workbench.action.reloadWindow",
                                         "when": "isDevelopment" },
    { "key": "shift+cmd+f",           "command": "workbench.action.terminal.searchWorkspace",
                                         "when": "terminalFocus && terminalProcessSupported && terminalTextSelected" },
    { "key": "alt+cmd+i",             "command": "workbench.action.toggleDevTools",
                                         "when": "isDevelopment" },
    { "key": "escape",                "command": "notifications.hideToasts",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "f10",                   "command": "extension.node-debug.startWithStopOnEntry",
                                         "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'" },
    { "key": "cmd+k alt+cmd+s",       "command": "git.stageSelectedRanges",
                                         "when": "isInDiffEditor && !operationInProgress" },
    { "key": "shift+cmd+v",           "command": "markdown.showPreview",
                                         "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
    { "key": "shift+alt+f12",         "command": "references-view.findReferences",
                                         "when": "editorHasReferenceProvider" },
    { "key": "f11",                   "command": "extension.node-debug.startWithStopOnEntry",
                                         "when": "!inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'node' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-node'" },
    { "key": "cmd+k cmd+n",           "command": "git.unstageSelectedRanges",
                                         "when": "isInDiffEditor && !operationInProgress" },
    { "key": "cmd+k v",               "command": "markdown.showPreviewToSide",
                                         "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
    { "key": "f4",                    "command": "references-view.next",
                                         "when": "reference-list.hasResult && references-view.canNavigate" },
    { "key": "cmd+k cmd+r",           "command": "git.revertSelectedRanges",
                                         "when": "isInDiffEditor && !operationInProgress" },
    { "key": "shift+f4",              "command": "references-view.prev",
                                         "when": "reference-list.hasResult && references-view.canNavigate" },
    { "key": "shift+alt+h",           "command": "references-view.showCallHierarchy",
                                         "when": "editorHasCallHierarchyProvider" },
    { "key": "alt+o",                 "command": "C_Cpp.SwitchHeaderSource",
                                         "when": "editorTextFocus && editorLangId == 'c' || editorTextFocus && editorLangId == 'cpp' || editorTextFocus && editorLangId == 'cuda-cpp'" },
    { "key": "alt+cmd+[Period]",      "command": "auto-close-tag.closeTag" },
    { "key": "f7",                    "command": "cmake.build",
                                         "when": "cmake:enableFullFeatureSet && !cmake:hideBuildCommand" },
    { "key": "escape",                "command": "extension.vim_escape",
                                         "when": "editorTextFocus && vim.active && !inDebugRepl" },
    { "key": "left",                  "command": "gitlens.key.left",
                                         "when": "gitlens:key:left" },
    { "key": "shift+enter",           "command": "python.execSelectionInTerminal",
                                         "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'" },
    { "key": "shift+f7",              "command": "cmake.buildWithTarget",
                                         "when": "cmake:enableFullFeatureSet && !cmake:hideBuildCommand" },
    { "key": "alt+left",              "command": "gitlens.key.alt+left",
                                         "when": "gitlens:key:alt+left" },
    { "key": "escape",                "command": "notebook.cell.quitEdit",
                                         "when": "inputFocus && notebookEditorFocused && vim.active && !editorHasSelection && !editorHoverVisible && vim.mode == 'Normal'" },
    { "key": "cmd+r",                 "command": "python.refreshTensorBoard",
                                         "when": "python.hasActiveTensorBoardSession" },
    { "key": "ctrl+f5",               "command": "cmake.debugTarget",
                                         "when": "cmake:enableFullFeatureSet && inCMakeProject && !cmake:hideDebugCommand && !inDebugMode" },
    { "key": "home",                  "command": "extension.vim_home",
                                         "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
    { "key": "cmd+left",              "command": "gitlens.key.ctrl+left",
                                         "when": "gitlens:key:ctrl+left" },
    { "key": "shift+f5",              "command": "cmake.launchTarget",
                                         "when": "cmake:enableFullFeatureSet && !cmake:hideDebugCommand && !inDebugMode" },
    { "key": "ctrl+home",             "command": "extension.vim_ctrl+home",
                                         "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
    { "key": "right",                 "command": "gitlens.key.right",
                                         "when": "gitlens:key:right" },
    { "key": "end",                   "command": "extension.vim_end",
                                         "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
    { "key": "alt+right",             "command": "gitlens.key.alt+right",
                                         "when": "gitlens:key:alt+right" },
    { "key": "ctrl+end",              "command": "extension.vim_ctrl+end",
                                         "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
    { "key": "cmd+right",             "command": "gitlens.key.ctrl+right",
                                         "when": "gitlens:key:ctrl+right" },
    { "key": "insert",                "command": "extension.vim_insert",
                                         "when": "editorTextFocus && vim.active && !inDebugRepl" },
    { "key": "alt+[Comma]",           "command": "gitlens.key.alt+,",
                                         "when": "gitlens:key:," },
    { "key": "backspace",             "command": "extension.vim_backspace",
                                         "when": "editorTextFocus && vim.active && !inDebugRepl" },
    { "key": "alt+[Period]",          "command": "gitlens.key.alt+.",
                                         "when": "gitlens:key:." },
    { "key": "delete",                "command": "extension.vim_delete",
                                         "when": "editorTextFocus && vim.active && !inDebugRepl" },
    { "key": "alt+enter",             "command": "gitlens.key.alt+enter",
                                         "when": "gitlens:key:alt+enter" },
    { "key": "tab",                   "command": "extension.vim_tab",
                                         "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
    { "key": "ctrl+enter",            "command": "gitlens.key.ctrl+enter",
                                         "when": "gitlens:key:ctrl+enter" },
    { "key": "shift+tab",             "command": "extension.vim_shift+tab",
                                         "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
    { "key": "escape",                "command": "gitlens.key.escape",
                                         "when": "editorTextFocus && gitlens:key:escape && !findWidgetVisible && !isInEmbeddedEditor && !quickFixWidgetVisible && !renameInputVisible && !suggestWidgetVisible" },
    { "key": "left",                  "command": "extension.vim_left",
                                         "when": "editorTextFocus && vim.active && !inDebugRepl" },
    { "key": "shift+alt+7",           "command": "gitlens.gitCommands",
                                         "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
    { "key": "right",                 "command": "extension.vim_right",
                                         "when": "editorTextFocus && vim.active && !inDebugRepl" },
    { "key": "alt+cmd+g shift+7",     "command": "gitlens.gitCommands",
                                         "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
    { "key": "up",                    "command": "extension.vim_up",
                                         "when": "editorTextFocus && vim.active && !inDebugRepl && !parameterHintsVisible && !suggestWidgetVisible" },
    { "key": "alt+b",                 "command": "gitlens.toggleFileBlame",
                                         "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /blameable/" },
    { "key": "down",                  "command": "extension.vim_down",
                                         "when": "editorTextFocus && vim.active && !inDebugRepl && !parameterHintsVisible && !suggestWidgetVisible" },
    { "key": "alt+cmd+g b",           "command": "gitlens.toggleFileBlame",
                                         "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/" },
    { "key": "shift+alt+b",           "command": "gitlens.toggleCodeLens",
                                         "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'alternate'" },
    { "key": "g g",                   "command": "list.focusFirst",
                                         "when": "listFocus && !inputFocus" },
    { "key": "alt+cmd+g shift+b",     "command": "gitlens.toggleCodeLens",
                                         "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'" },
    { "key": "h",                     "command": "list.collapse",
                                         "when": "listFocus && !inputFocus" },
    { "key": "alt+h",                 "command": "gitlens.showQuickFileHistory",
                                         "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
    { "key": "j",                     "command": "list.focusDown",
                                         "when": "listFocus && !inputFocus" },
    { "key": "alt+cmd+g h",           "command": "gitlens.showQuickFileHistory",
                                         "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
    { "key": "k",                     "command": "list.focusUp",
                                         "when": "listFocus && !inputFocus" },
    { "key": "shift+alt+h",           "command": "gitlens.showQuickRepoHistory",
                                         "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
    { "key": "l",                     "command": "list.select",
                                         "when": "listFocus && !inputFocus" },
    { "key": "alt+cmd+g shift+h",     "command": "gitlens.showQuickRepoHistory",
                                         "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
    { "key": "o",                     "command": "list.toggleExpand",
                                         "when": "listFocus && !inputFocus" },
    { "key": "alt+s",                 "command": "gitlens.showQuickRepoStatus",
                                         "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
    { "key": "shift+7",               "command": "list.toggleKeyboardNavigation",
                                         "when": "listFocus && listSupportsKeyboardNavigation && !inputFocus" },
    { "key": "ctrl+a",                "command": "extension.vim_ctrl+a",
                                         "when": "editorTextFocus && vim.active && vim.use<C-a> && !inDebugRepl" },
    { "key": "alt+cmd+g s",           "command": "gitlens.showQuickRepoStatus",
                                         "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
    { "key": "ctrl+b",                "command": "extension.vim_ctrl+b",
                                         "when": "editorTextFocus && vim.active && vim.use<C-b> && !inDebugRepl && vim.mode != 'Insert'" },
    { "key": "alt+c",                 "command": "gitlens.showQuickCommitFileDetails",
                                         "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'alternate'" },
    { "key": "ctrl+c",                "command": "extension.vim_ctrl+c",
                                         "when": "editorTextFocus && vim.active && vim.overrideCtrlC && vim.use<C-c> && !inDebugRepl" },
    { "key": "alt+cmd+g c",           "command": "gitlens.showQuickCommitFileDetails",
                                         "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'" },
    { "key": "ctrl+d",                "command": "extension.vim_ctrl+d",
                                         "when": "editorTextFocus && vim.active && vim.use<C-d> && !inDebugRepl" },
    { "key": "alt+[Comma]",           "command": "gitlens.diffWithPrevious",
                                         "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "alt+cmd+g [Comma]",     "command": "gitlens.diffWithPrevious",
                                         "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+d",                "command": "list.focusPageDown",
                                         "when": "listFocus && !inputFocus" },
    { "key": "ctrl+e",                "command": "extension.vim_ctrl+e",
                                         "when": "editorTextFocus && vim.active && vim.use<C-e> && !inDebugRepl" },
    { "key": "alt+[Comma]",           "command": "gitlens.diffWithPreviousInDiffLeft",
                                         "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+f",                "command": "extension.vim_ctrl+f",
                                         "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode != 'Insert'" },
    { "key": "alt+cmd+g [Comma]",     "command": "gitlens.diffWithPreviousInDiffLeft",
                                         "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+g",                "command": "extension.vim_ctrl+g",
                                         "when": "editorTextFocus && vim.active && vim.use<C-g> && !inDebugRepl" },
    { "key": "alt+[Comma]",           "command": "gitlens.diffWithPreviousInDiffRight",
                                         "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+h",                "command": "extension.vim_ctrl+h",
                                         "when": "editorTextFocus && vim.active && vim.use<C-h> && !inDebugRepl" },
    { "key": "alt+cmd+g [Comma]",     "command": "gitlens.diffWithPreviousInDiffRight",
                                         "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+i",                "command": "extension.vim_ctrl+i",
                                         "when": "editorTextFocus && vim.active && vim.use<C-i> && !inDebugRepl" },
    { "key": "alt+[Period]",          "command": "gitlens.diffWithNext",
                                         "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/" },
    { "key": "ctrl+j",                "command": "extension.vim_ctrl+j",
                                         "when": "editorTextFocus && vim.active && vim.use<C-j> && !inDebugRepl" },
    { "key": "alt+cmd+g [Period]",    "command": "gitlens.diffWithNext",
                                         "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/" },
    { "key": "ctrl+k",                "command": "extension.vim_ctrl+k",
                                         "when": "editorTextFocus && vim.active && vim.use<C-k> && !inDebugRepl" },
    { "key": "alt+[Period]",          "command": "gitlens.diffWithNextInDiffLeft",
                                         "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/" },
    { "key": "ctrl+l",                "command": "extension.vim_navigateCtrlL",
                                         "when": "editorTextFocus && vim.active && vim.use<C-l> && !inDebugRepl" },
    { "key": "alt+cmd+g [Period]",    "command": "gitlens.diffWithNextInDiffLeft",
                                         "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/" },
    { "key": "ctrl+m",                "command": "extension.vim_ctrl+m",
                                         "when": "editorTextFocus && vim.active && vim.use<C-m> && !inDebugRepl || vim.active && vim.use<C-m> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-m> && !inDebugRepl && vim.mode == 'SearchInProgressMode'" },
    { "key": "alt+[Period]",          "command": "gitlens.diffWithNextInDiffRight",
                                         "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/" },
    { "key": "ctrl+n",                "command": "extension.vim_ctrl+n",
                                         "when": "editorTextFocus && vim.active && vim.use<C-n> && !inDebugRepl || vim.active && vim.use<C-n> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-n> && !inDebugRepl && vim.mode == 'SearchInProgressMode'" },
    { "key": "alt+cmd+g [Period]",    "command": "gitlens.diffWithNextInDiffRight",
                                         "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/" },
    { "key": "ctrl+o",                "command": "extension.vim_ctrl+o",
                                         "when": "editorTextFocus && vim.active && vim.use<C-o> && !inDebugRepl" },
    { "key": "shift+alt+[IntlRo]",    "command": "gitlens.diffWithWorking",
                                         "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/" },
    { "key": "shift+alt+[Backquote]", "command": "gitlens.diffWithWorking",
                                         "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/" },
    { "key": "ctrl+p",                "command": "extension.vim_ctrl+p",
                                         "when": "suggestWidgetVisible && vim.active && vim.use<C-p> && !inDebugRepl || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'SearchInProgressMode'" },
    { "key": "alt+cmd+g shift+[IntlRo]", "command": "gitlens.diffWithWorking",
                                         "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/" },
    { "key": "alt+cmd+g shift+[Backquote]", "command": "gitlens.diffWithWorking",
                                         "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/" },
    { "key": "ctrl+q",                "command": "extension.vim_winCtrlQ",
                                         "when": "editorTextFocus && vim.active && vim.use<C-q> && !inDebugRepl" },
    { "key": "alt+[IntlRo]",          "command": "gitlens.diffLineWithPrevious",
                                         "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "alt+[Backquote]",       "command": "gitlens.diffLineWithPrevious",
                                         "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+r",                "command": "extension.vim_ctrl+r",
                                         "when": "editorTextFocus && vim.active && vim.use<C-r> && !inDebugRepl" },
    { "key": "alt+cmd+g [IntlRo]",    "command": "gitlens.diffLineWithPrevious",
                                         "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "alt+cmd+g [Backquote]", "command": "gitlens.diffLineWithPrevious",
                                         "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
    { "key": "ctrl+s",                "command": "extension.vim_ctrl+s",
                                         "when": "editorTextFocus && vim.active && vim.use<C-s> && !inDebugRepl" },
    { "key": "ctrl+shift+g",          "command": "workbench.view.scm",
                                         "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'" },
    { "key": "ctrl+t",                "command": "extension.vim_ctrl+t",
                                         "when": "editorTextFocus && vim.active && vim.use<C-t> && !inDebugRepl" },
    { "key": "cmd+c",                 "command": "gitlens.views.branches.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.branches/" },
    { "key": "ctrl+u",                "command": "extension.vim_ctrl+u",
                                         "when": "editorTextFocus && vim.active && vim.use<C-u> && !inDebugRepl" },
    { "key": "cmd+c",                 "command": "gitlens.views.commits.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.commits/" },
    { "key": "cmd+c",                 "command": "gitlens.views.contributors.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.contributors/" },
    { "key": "ctrl+u",                "command": "list.focusPageUp",
                                         "when": "listFocus && !inputFocus" },
    { "key": "ctrl+v",                "command": "extension.vim_ctrl+v",
                                         "when": "editorTextFocus && vim.active && vim.use<C-v> && !inDebugRepl" },
    { "key": "cmd+c",                 "command": "gitlens.views.fileHistory.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.fileHistory/" },
    { "key": "ctrl+w",                "command": "extension.vim_ctrl+w",
                                         "when": "editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl" },
    { "key": "cmd+c",                 "command": "gitlens.views.lineHistory.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.lineHistory/" },
    { "key": "ctrl+x",                "command": "extension.vim_ctrl+x",
                                         "when": "editorTextFocus && vim.active && vim.use<C-x> && !inDebugRepl" },
    { "key": "cmd+c",                 "command": "gitlens.views.remotes.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.remotes/" },
    { "key": "ctrl+y",                "command": "extension.vim_ctrl+y",
                                         "when": "editorTextFocus && vim.active && vim.use<C-y> && !inDebugRepl" },
    { "key": "cmd+c",                 "command": "gitlens.views.repositories.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.repositories/" },
    { "key": "ctrl+z",                "command": "extension.vim_ctrl+z",
                                         "when": "editorTextFocus && vim.active && vim.use<C-z> && !inDebugRepl" },
    { "key": "cmd+c",                 "command": "gitlens.views.stashes.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.stashes/" },
    { "key": "ctrl+6",                "command": "extension.vim_ctrl+6",
                                         "when": "editorTextFocus && vim.active && vim.use<C-6> && !inDebugRepl" },
    { "key": "cmd+c",                 "command": "gitlens.views.searchAndCompare.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.searchAndCompare\\b/" },
    { "key": "cmd+c",                 "command": "gitlens.views.tags.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.tags/" },
    { "key": "cmd+c",                 "command": "gitlens.views.worktrees.copy",
                                         "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.worktrees/" },
    { "key": "ctrl+shift+2",          "command": "extension.vim_ctrl+shift+2",
                                         "when": "editorTextFocus && vim.active && vim.use<C-shift+2>" },
    { "key": "ctrl+up",               "command": "extension.vim_ctrl+up",
                                         "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
    { "key": "ctrl+down",             "command": "extension.vim_ctrl+down",
                                         "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
    { "key": "ctrl+left",             "command": "extension.vim_ctrl+left",
                                         "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
    { "key": "ctrl+right",            "command": "extension.vim_ctrl+right",
                                         "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
    { "key": "ctrl+pagedown",         "command": "extension.vim_ctrl+pagedown",
                                         "when": "editorTextFocus && vim.active && vim.use<C-pagedown> && !inDebugRepl" },
    { "key": "ctrl+pageup",           "command": "extension.vim_ctrl+pageup",
                                         "when": "editorTextFocus && vim.active && vim.use<C-pageup> && !inDebugRepl" },
    { "key": "ctrl+space",            "command": "extension.vim_ctrl+space",
                                         "when": "editorTextFocus && vim.active && vim.use<C-space> && !inDebugRepl && vim.mode != 'Insert'" },
    { "key": "shift+g",               "command": "list.focusLast",
                                         "when": "listFocus && !inputFocus" },
    { "key": "ctrl+backspace",        "command": "extension.vim_ctrl+backspace",
                                         "when": "editorTextFocus && vim.active && vim.use<C-BS> && !inDebugRepl && vim.mode != 'Insert'" },
    { "key": "shift+backspace",       "command": "extension.vim_shift+backspace",
                                         "when": "editorTextFocus && vim.active && vim.use<S-BS> && !inDebugRepl && vim.mode != 'Insert'" },
    { "key": "cmd+left",              "command": "extension.vim_cmd+left",
                                         "when": "editorTextFocus && vim.active && vim.use<D-left> && !inDebugRepl && vim.mode != 'Insert'" },
    { "key": "cmd+right",             "command": "extension.vim_cmd+right",
                                         "when": "editorTextFocus && vim.active && vim.use<D-right> && !inDebugRepl && vim.mode != 'Insert'" },
    { "key": "cmd+a",                 "command": "extension.vim_cmd+a",
                                         "when": "editorTextFocus && vim.active && vim.use<D-a> && !inDebugRepl && vim.mode != 'Insert'" },
    { "key": "cmd+c",                 "command": "extension.vim_cmd+c",
                                         "when": "editorTextFocus && vim.active && vim.overrideCopy && vim.use<D-c> && !inDebugRepl" },
    { "key": "cmd+d",                 "command": "extension.vim_cmd+d",
                                         "when": "editorTextFocus && vim.active && vim.use<D-d> && !inDebugRepl" },
    { "key": "cmd+v",                 "command": "extension.vim_cmd+v",
                                         "when": "editorTextFocus && vim.active && vim.use<D-v> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || editorTextFocus && vim.active && vim.use<D-v> && !inDebugRepl && vim.mode == 'SearchInProgressMode'" },
    { "key": "alt+cmd+down",          "command": "extension.vim_cmd+alt+down",
                                         "when": "editorTextFocus && vim.active && !inDebugRepl" },
    { "key": "alt+cmd+up",            "command": "extension.vim_cmd+alt+up",
                                         "when": "editorTextFocus && vim.active && !inDebugRepl" },
    { "key": "j",                     "command": "notebook.focusNextEditor",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused && vim.mode == 'Normal' && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'" },
    { "key": "k",                     "command": "notebook.focusPreviousEditor",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused && vim.mode == 'Normal' && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'" },
    { "key": "cmd+[Period]",          "command": "acceptSelectedCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "enter",                 "command": "acceptSelectedCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "shift+escape",          "command": "hideCodeActionWidget",
                                         "when": "codeActionMenuVisible" },
    { "key": "escape",                "command": "hideCodeActionWidget",
                                         "when": "codeActionMenuVisible" },
    { "key": "cmd+enter",             "command": "previewSelectedCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "ctrl+n",                "command": "selectNextCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "cmd+down",              "command": "selectNextCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "down",                  "command": "selectNextCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "ctrl+p",                "command": "selectPrevCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "cmd+up",                "command": "selectPrevCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "up",                    "command": "selectPrevCodeAction",
                                         "when": "codeActionMenuVisible" }
    ]
    
    
    // Die folgenden weiteren Befehle sind verf√ºgbar: 
    // - C_Cpp.AddDebugConfiguration
    // - C_Cpp.AddToIncludePath
    // - C_Cpp.BuildAndDebugFile
    // - C_Cpp.BuildAndRunFile
    // - C_Cpp.CancelCodeAnalysis
    // - C_Cpp.CheckForCompiler
    // - C_Cpp.ConfigurationEdit
    // - C_Cpp.ConfigurationEditJSON
    // - C_Cpp.ConfigurationEditUI
    // - C_Cpp.ConfigurationProviderSelect
    // - C_Cpp.ConfigurationSelect
    // - C_Cpp.CreateDeclarationOrDefinition
    // - C_Cpp.DisableAllTypeCodeAnalysisProblems
    // - C_Cpp.DisableErrorSquiggles
    // - C_Cpp.EnableErrorSquiggles
    // - C_Cpp.FixAllCodeAnalysisProblems
    // - C_Cpp.FixAllTypeCodeAnalysisProblems
    // - C_Cpp.FixThisCodeAnalysisProblem
    // - C_Cpp.GenerateDoxygenComment
    // - C_Cpp.GenerateEditorConfig
    // - C_Cpp.GoToNextDirectiveInGroup
    // - C_Cpp.GoToPrevDirectiveInGroup
    // - C_Cpp.LogDiagnostics
    // - C_Cpp.PauseCodeAnalysis
    // - C_Cpp.PauseParsing
    // - C_Cpp.RemoveAllCodeAnalysisProblems
    // - C_Cpp.RemoveCodeAnalysisProblems
    // - C_Cpp.RescanWorkspace
    // - C_Cpp.ResetDatabase
    // - C_Cpp.RestartIntelliSenseForFile
    // - C_Cpp.ResumeCodeAnalysis
    // - C_Cpp.ResumeParsing
    // - C_Cpp.RunCodeAnalysisOnActiveFile
    // - C_Cpp.RunCodeAnalysisOnAllFiles
    // - C_Cpp.RunCodeAnalysisOnOpenFiles
    // - C_Cpp.ShowActiveCodeAnalysisCommands
    // - C_Cpp.ShowCodeAnalysisDocumentation
    // - C_Cpp.ShowIdleCodeAnalysisCommands
    // - C_Cpp.ShowParsingCommands
    // - C_Cpp.ShowReferenceItem
    // - C_Cpp.ShowReferencesProgress
    // - C_Cpp.TakeSurvey
    // - C_Cpp.ToggleDimInactiveRegions
    // - C_Cpp.ToggleIncludeFallback
    // - C_Cpp.VcpkgClipboardInstallSuggested
    // - C_Cpp.VcpkgOnlineHelpSuggested
    // - C_Cpp.activeSshTarget
    // - C_Cpp.addSshTarget
    // - C_Cpp.referencesViewGroupByType
    // - C_Cpp.referencesViewUngroupByType
    // - C_Cpp.refreshCppSshTargetsView
    // - C_Cpp.removeSshTarget
    // - C_Cpp.selectActiveSshTarget
    // - C_Cpp.selectDefaultCompiler
    // - C_Cpp.selectSshTarget
    // - C_Cpp.setActiveSshTarget
    // - C_Cpp.sshTerminal
    // - CppReferencesView.focus
    // - CppReferencesView.resetViewLocation
    // - CppSshTargetsView.focus
    // - CppSshTargetsView.resetViewLocation
    // - acceptSelectedSuggestionOnEnter
    // - acceptSnippet
    // - addRootFolder
    // - audioCues.help
    // - breadcrumbs.toggle
    // - breadcrumbs.toggleFromEditorTitle
    // - callStack.collapse
    // - changeEditorIndentation
    // - cleanSearchEditorState
    // - closeReferenceSearchEditor
    // - cmake.addBuildPreset
    // - cmake.addConfigurePreset
    // - cmake.addTestPreset
    // - cmake.buildAll
    // - cmake.buildNamedTarget
    // - cmake.clean
    // - cmake.cleanAll
    // - cmake.cleanConfigure
    // - cmake.cleanConfigureAll
    // - cmake.cleanRebuild
    // - cmake.cleanRebuildAll
    // - cmake.compileFile
    // - cmake.configure
    // - cmake.configureAll
    // - cmake.ctest
    // - cmake.ctestAll
    // - cmake.debugTargetAll
    // - cmake.editCache
    // - cmake.editCacheUI
    // - cmake.editKits
    // - cmake.install
    // - cmake.installAll
    // - cmake.launchTargetAll
    // - cmake.logDiagnostics
    // - cmake.onlineHelp
    // - cmake.openCMakePresets
    // - cmake.outline.build
    // - cmake.outline.buildAll
    // - cmake.outline.buildTarget
    // - cmake.outline.clean
    // - cmake.outline.cleanAll
    // - cmake.outline.cleanConfigure
    // - cmake.outline.cleanConfigureAll
    // - cmake.outline.cleanRebuild
    // - cmake.outline.cleanRebuildAll
    // - cmake.outline.compileFile
    // - cmake.outline.configure
    // - cmake.outline.configureAll
    // - cmake.outline.debugTarget
    // - cmake.outline.editCacheUI
    // - cmake.outline.focus
    // - cmake.outline.launchTarget
    // - cmake.outline.resetViewLocation
    // - cmake.outline.revealInCMakeLists
    // - cmake.outline.runUtilityTarget
    // - cmake.outline.selectWorkspace
    // - cmake.outline.setDefaultTarget
    // - cmake.outline.setLaunchTarget
    // - cmake.outline.stop
    // - cmake.outline.stopAll
    // - cmake.quickStart
    // - cmake.resetState
    // - cmake.scanForCompilers
    // - cmake.scanForKits
    // - cmake.selectActiveFolder
    // - cmake.selectBuildPreset
    // - cmake.selectConfigurePreset
    // - cmake.selectKit
    // - cmake.selectLaunchTarget
    // - cmake.selectTestPreset
    // - cmake.setDefaultTarget
    // - cmake.setVariant
    // - cmake.setVariantAll
    // - cmake.showBuildCommand
    // - cmake.showConfigureCommand
    // - cmake.stop
    // - cmake.stopAll
    // - cmake.viewLog
    // - codelens.showLensesInCurrentLine
    // - columnSelect
    // - comments.collapse
    // - comments.expand
    // - compareFiles
    // - compareSelected
    // - compositionEnd
    // - compositionStart
    // - compositionType
    // - configureExtensionsAutoUpdate.all
    // - configureExtensionsAutoUpdate.enabled
    // - configureExtensionsAutoUpdate.none
    // - cpptools.activeConfigCustomVariable
    // - cpptools.activeConfigName
    // - cpptools.setActiveConfigName
    // - createCursor
    // - cursorRedo
    // - cursorWordAccessibilityLeft
    // - cursorWordAccessibilityLeftSelect
    // - cursorWordAccessibilityRight
    // - cursorWordAccessibilityRightSelect
    // - cursorWordEndLeft
    // - cursorWordEndLeftSelect
    // - cursorWordPartStartLeft
    // - cursorWordPartStartLeftSelect
    // - cursorWordRight
    // - cursorWordRightSelect
    // - cursorWordStartLeft
    // - cursorWordStartLeftSelect
    // - cursorWordStartRight
    // - cursorWordStartRightSelect
    // - cut
    // - debug.action.toggleDisassemblyViewSourceCode
    // - debug.addConfiguration
    // - debug.addToWatchExpressions
    // - debug.breakWhenValueChanges
    // - debug.breakWhenValueIsAccessed
    // - debug.breakWhenValueIsRead
    // - debug.collapseRepl
    // - debug.copyEvaluatePath
    // - debug.copyStackTrace
    // - debug.editBreakpoint
    // - debug.editFunctionBreakpoint
    // - debug.editFunctionBreakpointHitCount
    // - debug.enableOrDisableBreakpoint
    // - debug.installAdditionalDebuggers
    // - debug.jumpToCursor
    // - debug.replCopy
    // - debug.replPaste
    // - debug.setWatchExpression
    // - debug.startFromConfig
    // - debug.toggleReplIgnoreFocus
    // - default:compositionEnd
    // - default:compositionStart
    // - default:compositionType
    // - default:cut
    // - default:paste
    // - default:redo
    // - default:replacePreviousChar
    // - default:type
    // - default:undo
    // - deleteInsideWord
    // - deleteWordEndLeft
    // - deleteWordEndRight
    // - deleteWordStartLeft
    // - deleteWordStartRight
    // - detailsContainers.focus
    // - detailsContainers.resetViewLocation
    // - devVolumes.focus
    // - devVolumes.resetViewLocation
    // - editor.action.addCursorsToBottom
    // - editor.action.addCursorsToTop
    // - editor.action.addSelectionToPreviousFindMatch
    // - editor.action.changeTabDisplaySize
    // - editor.action.clipboardCopyWithSyntaxHighlightingAction
    // - editor.action.detectIndentation
    // - editor.action.duplicateSelection
    // - editor.action.findReferences
    // - editor.action.fixAll
    // - editor.action.focusNextCursor
    // - editor.action.focusPreviousCursor
    // - editor.action.fontZoomIn
    // - editor.action.fontZoomOut
    // - editor.action.fontZoomReset
    // - editor.action.forceRetokenize
    // - editor.action.format
    // - editor.action.formatChanges
    // - editor.action.formatDocument.multiple
    // - editor.action.formatSelection.multiple
    // - editor.action.goToDeclaration
    // - editor.action.goToMatchFindAction
    // - editor.action.goToSelectionAnchor
    // - editor.action.goToTypeDefinition
    // - editor.action.indentUsingSpaces
    // - editor.action.indentUsingTabs
    // - editor.action.indentationToSpaces
    // - editor.action.indentationToTabs
    // - editor.action.inlineSuggest.showNext
    // - editor.action.inlineSuggest.showPrevious
    // - editor.action.inlineSuggest.toggleAlwaysShowToolbar
    // - editor.action.inlineSuggest.trigger
    // - editor.action.insertSnippet
    // - editor.action.inspectTMScopes
    // - editor.action.measureExtHostLatency
    // - editor.action.moveCarretLeftAction
    // - editor.action.moveCarretRightAction
    // - editor.action.moveSelectionToPreviousFindMatch
    // - editor.action.openDeclarationToTheSide
    // - editor.action.openLink
    // - editor.action.peekDeclaration
    // - editor.action.peekTypeDefinition
    // - editor.action.previewDeclaration
    // - editor.action.refactor.preview
    // - editor.action.referenceSearch.trigger
    // - editor.action.reindentlines
    // - editor.action.reindentselectedlines
    // - editor.action.removeDuplicateLines
    // - editor.action.resetSuggestSize
    // - editor.action.revealDeclaration
    // - editor.action.selectToBracket
    // - editor.action.showDefinitionPreviewHover
    // - editor.action.showReferences
    // - editor.action.showSnippets
    // - editor.action.smartSelect.grow
    // - editor.action.sortLinesAscending
    // - editor.action.sortLinesDescending
    // - editor.action.sourceAction
    // - editor.action.startDebugTextMate
    // - editor.action.surroundWithSnippet
    // - editor.action.toggleColumnSelection
    // - editor.action.toggleMinimap
    // - editor.action.toggleRenderControlCharacter
    // - editor.action.toggleRenderWhitespace
    // - editor.action.toggleScreenReaderAccessibilityMode
    // - editor.action.toggleStickyScroll
    // - editor.action.transformToCamelcase
    // - editor.action.transformToKebabcase
    // - editor.action.transformToLowercase
    // - editor.action.transformToSnakecase
    // - editor.action.transformToTitlecase
    // - editor.action.transformToUppercase
    // - editor.action.transpose
    // - editor.action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters
    // - editor.action.unicodeHighlight.disableHighlightingOfInvisibleCharacters
    // - editor.action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters
    // - editor.action.unicodeHighlight.showExcludeOptions
    // - editor.action.wordHighlight.trigger
    // - editor.actions.findWithArgs
    // - editor.debug.action.addLogPoint
    // - editor.debug.action.conditionalBreakpoint
    // - editor.debug.action.editBreakpoint
    // - editor.debug.action.goToNextBreakpoint
    // - editor.debug.action.goToPreviousBreakpoint
    // - editor.debug.action.openDisassemblyView
    // - editor.debug.action.runToCursor
    // - editor.debug.action.selectionToRepl
    // - editor.debug.action.selectionToWatch
    // - editor.debug.action.stepIntoTargets
    // - editor.emmet.action.balanceIn
    // - editor.emmet.action.balanceOut
    // - editor.emmet.action.decrementNumberByOne
    // - editor.emmet.action.decrementNumberByOneTenth
    // - editor.emmet.action.decrementNumberByTen
    // - editor.emmet.action.evaluateMathExpression
    // - editor.emmet.action.incrementNumberByOne
    // - editor.emmet.action.incrementNumberByOneTenth
    // - editor.emmet.action.incrementNumberByTen
    // - editor.emmet.action.matchTag
    // - editor.emmet.action.mergeLines
    // - editor.emmet.action.nextEditPoint
    // - editor.emmet.action.prevEditPoint
    // - editor.emmet.action.reflectCSSValue
    // - editor.emmet.action.removeTag
    // - editor.emmet.action.selectNextItem
    // - editor.emmet.action.selectPrevItem
    // - editor.emmet.action.splitJoinTag
    // - editor.emmet.action.toggleComment
    // - editor.emmet.action.updateImageSize
    // - editor.emmet.action.updateTag
    // - editor.emmet.action.wrapWithAbbreviation
    // - editor.fold
    // - editor.gotoNextFold
    // - editor.gotoParentFold
    // - editor.gotoPreviousFold
    // - editor.inlayHints.Reset
    // - editor.showTypeHierarchy
    // - editor.unfold
    // - emmet.expandAbbreviation
    // - explorer.download
    // - explorer.newFile
    // - explorer.newFolder
    // - explorer.openWith
    // - explorer.upload
    // - extension.bisect.next
    // - extension.bisect.start
    // - extension.bisect.stop
    // - extension.js-debug.addCustomBreakpoints
    // - extension.js-debug.callers.add
    // - extension.js-debug.callers.goToCaller
    // - extension.js-debug.callers.gotToTarget
    // - extension.js-debug.callers.remove
    // - extension.js-debug.callers.removeAll
    // - extension.js-debug.createDebuggerTerminal
    // - extension.js-debug.createDiagnostics
    // - extension.js-debug.debugLink
    // - extension.js-debug.disableSourceMapStepping
    // - extension.js-debug.enableSourceMapStepping
    // - extension.js-debug.getDiagnosticLogs
    // - extension.js-debug.npmScript
    // - extension.js-debug.openEdgeDevTools
    // - extension.js-debug.prettyPrint
    // - extension.js-debug.removeAllCustomBreakpoints
    // - extension.js-debug.removeCustomBreakpoint
    // - extension.js-debug.revealPage
    // - extension.js-debug.startProfile
    // - extension.js-debug.stopProfile
    // - extension.js-debug.toggleSkippingFile
    // - extension.jsProfileVisualizer.table.clearCodeLenses
    // - extension.node-debug.toggleAutoAttach
    // - extension.open
    // - extension.pickNativeProcess
    // - extension.pickRemoteNativeProcess
    // - extension.pwa-node-debug.attachNodeProcess
    // - extension.vim_ctrl+[
    // - extension.vim_ctrl+]
    // - extension.vim_ctrl+^
    // - extensions.actions.searchByCategory.Azure
    // - extensions.actions.searchByCategory.Data Science
    // - extensions.actions.searchByCategory.Debuggers
    // - extensions.actions.searchByCategory.Education
    // - extensions.actions.searchByCategory.Extension Packs
    // - extensions.actions.searchByCategory.Formatters
    // - extensions.actions.searchByCategory.Keymaps
    // - extensions.actions.searchByCategory.Language Packs
    // - extensions.actions.searchByCategory.Linters
    // - extensions.actions.searchByCategory.Machine Learning
    // - extensions.actions.searchByCategory.Notebooks
    // - extensions.actions.searchByCategory.Other
    // - extensions.actions.searchByCategory.Programming Languages
    // - extensions.actions.searchByCategory.SCM Providers
    // - extensions.actions.searchByCategory.Snippets
    // - extensions.actions.searchByCategory.Testing
    // - extensions.actions.searchByCategory.Themes
    // - extensions.actions.searchByCategory.Visualization
    // - extensions.filter.featured
    // - extensions.recommendedList.focus
    // - extensions.recommendedList.resetViewLocation
    // - extensions.sort.installs
    // - extensions.sort.name
    // - extensions.sort.publishedDate
    // - extensions.sort.rating
    // - extensions.sort.updateDate
    // - files.openTimeline
    // - files.participants.resetChoice
    // - filesExplorer.findInWorkspace
    // - focusAndAcceptSuggestion
    // - gaia.copyExample
    // - gaia_feedback.submit_feedback
    // - gaia_hover.show_call_summary_document
    // - getContextKeyInfo
    // - git-base.api.getRemoteSources
    // - git._syncAll
    // - git.acceptMerge
    // - git.addRemote
    // - git.api.getRemoteSources
    // - git.api.getRepositories
    // - git.api.getRepositoryState
    // - git.branch
    // - git.branchFrom
    // - git.checkout
    // - git.checkoutDetached
    // - git.cherryPick
    // - git.clean
    // - git.cleanAll
    // - git.cleanAllTracked
    // - git.cleanAllUntracked
    // - git.clone
    // - git.cloneRecursive
    // - git.close
    // - git.closeAllDiffEditors
    // - git.commit
    // - git.commitAll
    // - git.commitAllAmend
    // - git.commitAllAmendNoVerify
    // - git.commitAllNoVerify
    // - git.commitAllSigned
    // - git.commitAllSignedNoVerify
    // - git.commitEmpty
    // - git.commitEmptyNoVerify
    // - git.commitMessageAccept
    // - git.commitMessageDiscard
    // - git.commitNoVerify
    // - git.commitStaged
    // - git.commitStagedAmend
    // - git.commitStagedAmendNoVerify
    // - git.commitStagedNoVerify
    // - git.commitStagedSigned
    // - git.commitStagedSignedNoVerify
    // - git.continueInLocalClone
    // - git.createTag
    // - git.deleteBranch
    // - git.deleteRemoteTag
    // - git.deleteTag
    // - git.fetch
    // - git.fetchAll
    // - git.fetchPrune
    // - git.ignore
    // - git.init
    // - git.manageUnsafeRepositories
    // - git.merge
    // - git.mergeAbort
    // - git.openAllChanges
    // - git.openChange
    // - git.openFile
    // - git.openFile2
    // - git.openHEADFile
    // - git.openMergeEditor
    // - git.openRepositoriesInParentFolders
    // - git.openRepository
    // - git.openResource
    // - git.publish
    // - git.pull
    // - git.pullFrom
    // - git.pullRebase
    // - git.push
    // - git.pushForce
    // - git.pushTags
    // - git.pushTo
    // - git.pushToForce
    // - git.pushWithTags
    // - git.pushWithTagsForce
    // - git.rebase
    // - git.rebaseAbort
    // - git.refresh
    // - git.removeRemote
    // - git.rename
    // - git.renameBranch
    // - git.restoreCommitTemplate
    // - git.revealFileInOS.linux
    // - git.revealFileInOS.mac
    // - git.revealFileInOS.windows
    // - git.revealInExplorer
    // - git.revertChange
    // - git.runGitMerge
    // - git.runGitMergeDiff3
    // - git.showOutput
    // - git.stage
    // - git.stageAll
    // - git.stageAllMerge
    // - git.stageAllTracked
    // - git.stageAllUntracked
    // - git.stageChange
    // - git.stash
    // - git.stashApply
    // - git.stashApplyLatest
    // - git.stashDrop
    // - git.stashDropAll
    // - git.stashIncludeUntracked
    // - git.stashPop
    // - git.stashPopLatest
    // - git.stashStaged
    // - git.sync
    // - git.syncRebase
    // - git.timeline.compareWithSelected
    // - git.timeline.copyCommitId
    // - git.timeline.copyCommitMessage
    // - git.timeline.openDiff
    // - git.timeline.selectForCompare
    // - git.undoCommit
    // - git.unstage
    // - git.unstageAll
    // - github.copyVscodeDevLink
    // - github.copyVscodeDevLinkFile
    // - github.openOnVscodeDev
    // - github.publish
    // - gitlens.action.createPullRequest
    // - gitlens.action.hover.commands
    // - gitlens.action.openPullRequest
    // - gitlens.addAuthors
    // - gitlens.browseRepoAtRevision
    // - gitlens.browseRepoAtRevisionInNewWindow
    // - gitlens.browseRepoBeforeRevision
    // - gitlens.browseRepoBeforeRevisionInNewWindow
    // - gitlens.clearFileAnnotations
    // - gitlens.closeUnchangedFiles
    // - gitlens.compareHeadWith
    // - gitlens.compareWith
    // - gitlens.compareWorkingWith
    // - gitlens.computingFileAnnotations
    // - gitlens.connectRemoteProvider
    // - gitlens.copyAutolinkUrl
    // - gitlens.copyCurrentBranch
    // - gitlens.copyDeepLinkToBranch
    // - gitlens.copyDeepLinkToCommit
    // - gitlens.copyDeepLinkToRepo
    // - gitlens.copyDeepLinkToTag
    // - gitlens.copyMessageToClipboard
    // - gitlens.copyRemoteBranchUrl
    // - gitlens.copyRemoteBranchesUrl
    // - gitlens.copyRemoteCommitUrl
    // - gitlens.copyRemoteComparisonUrl
    // - gitlens.copyRemoteFileUrlFrom
    // - gitlens.copyRemoteFileUrlToClipboard
    // - gitlens.copyRemoteFileUrlWithoutRange
    // - gitlens.copyRemoteIssueUrl
    // - gitlens.copyRemotePullRequestUrl
    // - gitlens.copyRemoteRepositoryUrl
    // - gitlens.copyShaToClipboard
    // - gitlens.createPullRequestOnRemote
    // - gitlens.diffDirectory
    // - gitlens.diffDirectoryWithHead
    // - gitlens.diffHeadWith
    // - gitlens.diffLineWithWorking
    // - gitlens.diffWith
    // - gitlens.diffWithRevision
    // - gitlens.diffWithRevisionFrom
    // - gitlens.diffWithWorkingInDiffLeft
    // - gitlens.diffWithWorkingInDiffRight
    // - gitlens.diffWorkingWith
    // - gitlens.disableDebugLogging
    // - gitlens.disableRebaseEditor
    // - gitlens.disconnectRemoteProvider
    // - gitlens.enableDebugLogging
    // - gitlens.enableRebaseEditor
    // - gitlens.externalDiff
    // - gitlens.externalDiffAll
    // - gitlens.fetchRepositories
    // - gitlens.focus.refresh
    // - gitlens.getStarted
    // - gitlens.ghpr.views.openOrCreateWorktree
    // - gitlens.gitCommands.branch
    // - gitlens.gitCommands.cherryPick
    // - gitlens.gitCommands.merge
    // - gitlens.gitCommands.rebase
    // - gitlens.gitCommands.reset
    // - gitlens.gitCommands.revert
    // - gitlens.gitCommands.switch
    // - gitlens.gitCommands.tag
    // - gitlens.gitCommands.worktree
    // - gitlens.graph.addAuthor
    // - gitlens.graph.applyStash
    // - gitlens.graph.cherryPick
    // - gitlens.graph.columnAuthorOff
    // - gitlens.graph.columnAuthorOn
    // - gitlens.graph.columnChangesOff
    // - gitlens.graph.columnChangesOn
    // - gitlens.graph.columnDateTimeOff
    // - gitlens.graph.columnDateTimeOn
    // - gitlens.graph.columnShaOff
    // - gitlens.graph.columnShaOn
    // - gitlens.graph.compareAncestryWithWorking
    // - gitlens.graph.compareWithHead
    // - gitlens.graph.compareWithUpstream
    // - gitlens.graph.compareWithWorking
    // - gitlens.graph.copy
    // - gitlens.graph.copyDeepLinkToBranch
    // - gitlens.graph.copyDeepLinkToCommit
    // - gitlens.graph.copyDeepLinkToRepo
    // - gitlens.graph.copyDeepLinkToTag
    // - gitlens.graph.copyMessage
    // - gitlens.graph.copyRemoteBranchUrl
    // - gitlens.graph.copyRemoteCommitUrl
    // - gitlens.graph.copySha
    // - gitlens.graph.createBranch
    // - gitlens.graph.createPullRequest
    // - gitlens.graph.createTag
    // - gitlens.graph.createWorktree
    // - gitlens.graph.deleteBranch
    // - gitlens.graph.deleteStash
    // - gitlens.graph.deleteTag
    // - gitlens.graph.fetch
    // - gitlens.graph.hideLocalBranch
    // - gitlens.graph.hideRefGroup
    // - gitlens.graph.hideRemote
    // - gitlens.graph.hideRemoteBranch
    // - gitlens.graph.hideTag
    // - gitlens.graph.mergeBranchInto
    // - gitlens.graph.openBranchOnRemote
    // - gitlens.graph.openCommitOnRemote
    // - gitlens.graph.openPullRequestOnRemote
    // - gitlens.graph.openSCM
    // - gitlens.graph.pull
    // - gitlens.graph.push
    // - gitlens.graph.rebaseOntoBranch
    // - gitlens.graph.rebaseOntoCommit
    // - gitlens.graph.rebaseOntoUpstream
    // - gitlens.graph.refresh
    // - gitlens.graph.renameBranch
    // - gitlens.graph.resetCommit
    // - gitlens.graph.resetToCommit
    // - gitlens.graph.revert
    // - gitlens.graph.saveStash
    // - gitlens.graph.showInDetailsView
    // - gitlens.graph.switchToAnotherBranch
    // - gitlens.graph.switchToBranch
    // - gitlens.graph.switchToCommit
    // - gitlens.graph.switchToTag
    // - gitlens.graph.undoCommit
    // - gitlens.inviteToLiveShare
    // - gitlens.openAssociatedPullRequestOnRemote
    // - gitlens.openAutolinkUrl
    // - gitlens.openBlamePriorToChange
    // - gitlens.openBranchInRemote
    // - gitlens.openBranchOnRemote
    // - gitlens.openBranchesInRemote
    // - gitlens.openBranchesOnRemote
    // - gitlens.openChangedFiles
    // - gitlens.openCommitInRemote
    // - gitlens.openCommitOnRemote
    // - gitlens.openComparisonOnRemote
    // - gitlens.openCurrentBranchOnRemote
    // - gitlens.openFileFromRemote
    // - gitlens.openFileHistory
    // - gitlens.openFileInRemote
    // - gitlens.openFileOnRemote
    // - gitlens.openFileOnRemoteFrom
    // - gitlens.openFileRevision
    // - gitlens.openFileRevisionFrom
    // - gitlens.openFolderHistory
    // - gitlens.openInRemote
    // - gitlens.openIssueOnRemote
    // - gitlens.openOnRemote
    // - gitlens.openPullRequestOnRemote
    // - gitlens.openRepoInRemote
    // - gitlens.openRepoOnRemote
    // - gitlens.openRevisionFile
    // - gitlens.openRevisionFileInDiffLeft
    // - gitlens.openRevisionFileInDiffRight
    // - gitlens.openWalkthrough
    // - gitlens.openWorkingFile
    // - gitlens.openWorkingFileInDiffLeft
    // - gitlens.openWorkingFileInDiffRight
    // - gitlens.plus.hide
    // - gitlens.plus.learn
    // - gitlens.plus.loginOrSignUp
    // - gitlens.plus.logout
    // - gitlens.plus.manage
    // - gitlens.plus.purchase
    // - gitlens.plus.resendVerification
    // - gitlens.plus.reset
    // - gitlens.plus.restore
    // - gitlens.plus.showPlans
    // - gitlens.plus.startPreviewTrial
    // - gitlens.plus.validate
    // - gitlens.pullRepositories
    // - gitlens.pushRepositories
    // - gitlens.quickOpenFileHistory
    // - gitlens.refreshHover
    // - gitlens.refreshTimelinePage
    // - gitlens.resetAvatarCache
    // - gitlens.resetSuppressedWarnings
    // - gitlens.resetTrackedUsage
    // - gitlens.revealCommitInView
    // - gitlens.setViewsLayout
    // - gitlens.showBranchesView
    // - gitlens.showCommitDetailsView
    // - gitlens.showCommitInView
    // - gitlens.showCommitSearch
    // - gitlens.showCommitsInView
    // - gitlens.showCommitsView
    // - gitlens.showContributorsView
    // - gitlens.showFileHistoryInView
    // - gitlens.showFileHistoryView
    // - gitlens.showFocusPage
    // - gitlens.showGraphPage
    // - gitlens.showHomeView
    // - gitlens.showInCommitGraph
    // - gitlens.showInDetailsView
    // - gitlens.showLastQuickPick
    // - gitlens.showLineHistoryView
    // - gitlens.showQuickBranchHistory
    // - gitlens.showQuickCommitDetails
    // - gitlens.showQuickRevisionDetails
    // - gitlens.showQuickRevisionDetailsInDiffLeft
    // - gitlens.showQuickRevisionDetailsInDiffRight
    // - gitlens.showQuickStashList
    // - gitlens.showRemotesView
    // - gitlens.showRepositoriesView
    // - gitlens.showSearchAndCompareView
    // - gitlens.showSettingsPage
    // - gitlens.showSettingsPage#autolinks
    // - gitlens.showSettingsPage#branches-view
    // - gitlens.showSettingsPage#commit-graph
    // - gitlens.showSettingsPage#commits-view
    // - gitlens.showSettingsPage#contributors-view
    // - gitlens.showSettingsPage#file-history-view
    // - gitlens.showSettingsPage#line-history-view
    // - gitlens.showSettingsPage#remotes-view
    // - gitlens.showSettingsPage#repositories-view
    // - gitlens.showSettingsPage#search-compare-view
    // - gitlens.showSettingsPage#stashes-view
    // - gitlens.showSettingsPage#tags-view
    // - gitlens.showSettingsPage#views
    // - gitlens.showSettingsPage#worktrees-view
    // - gitlens.showStashesView
    // - gitlens.showTagsView
    // - gitlens.showTimelinePage
    // - gitlens.showTimelineView
    // - gitlens.showWelcomePage
    // - gitlens.showWorktreesView
    // - gitlens.stashApply
    // - gitlens.stashSave
    // - gitlens.stashSaveFiles
    // - gitlens.switchMode
    // - gitlens.toggleFileBlameInDiffLeft
    // - gitlens.toggleFileBlameInDiffRight
    // - gitlens.toggleFileChanges
    // - gitlens.toggleFileChangesOnly
    // - gitlens.toggleFileHeatmap
    // - gitlens.toggleFileHeatmapInDiffLeft
    // - gitlens.toggleFileHeatmapInDiffRight
    // - gitlens.toggleLineBlame
    // - gitlens.toggleReviewMode
    // - gitlens.toggleZenMode
    // - gitlens.views.addAuthor
    // - gitlens.views.addAuthors
    // - gitlens.views.addRemote
    // - gitlens.views.applyChanges
    // - gitlens.views.branches.focus
    // - gitlens.views.branches.refresh
    // - gitlens.views.branches.removeView
    // - gitlens.views.branches.resetViewLocation
    // - gitlens.views.branches.setFilesLayoutToAuto
    // - gitlens.views.branches.setFilesLayoutToList
    // - gitlens.views.branches.setFilesLayoutToTree
    // - gitlens.views.branches.setLayoutToList
    // - gitlens.views.branches.setLayoutToTree
    // - gitlens.views.branches.setShowAvatarsOff
    // - gitlens.views.branches.setShowAvatarsOn
    // - gitlens.views.branches.setShowBranchComparisonOff
    // - gitlens.views.branches.setShowBranchComparisonOn
    // - gitlens.views.branches.setShowBranchPullRequestOff
    // - gitlens.views.branches.setShowBranchPullRequestOn
    // - gitlens.views.branches.toggleVisibility
    // - gitlens.views.browseRepoAtRevision
    // - gitlens.views.browseRepoAtRevisionInNewWindow
    // - gitlens.views.browseRepoBeforeRevision
    // - gitlens.views.browseRepoBeforeRevisionInNewWindow
    // - gitlens.views.cherryPick
    // - gitlens.views.clearNode
    // - gitlens.views.closeRepository
    // - gitlens.views.commitDetails.focus
    // - gitlens.views.commitDetails.removeView
    // - gitlens.views.commitDetails.resetViewLocation
    // - gitlens.views.commitDetails.toggleVisibility
    // - gitlens.views.commits.focus
    // - gitlens.views.commits.refresh
    // - gitlens.views.commits.removeView
    // - gitlens.views.commits.resetViewLocation
    // - gitlens.views.commits.setFilesLayoutToAuto
    // - gitlens.views.commits.setFilesLayoutToList
    // - gitlens.views.commits.setFilesLayoutToTree
    // - gitlens.views.commits.setMyCommitsOnlyOff
    // - gitlens.views.commits.setMyCommitsOnlyOn
    // - gitlens.views.commits.setShowAvatarsOff
    // - gitlens.views.commits.setShowAvatarsOn
    // - gitlens.views.commits.setShowBranchComparisonOff
    // - gitlens.views.commits.setShowBranchComparisonOn
    // - gitlens.views.commits.setShowBranchPullRequestOff
    // - gitlens.views.commits.setShowBranchPullRequestOn
    // - gitlens.views.commits.toggleVisibility
    // - gitlens.views.compareAncestryWithWorking
    // - gitlens.views.compareFileWithSelected
    // - gitlens.views.compareWithHead
    // - gitlens.views.compareWithSelected
    // - gitlens.views.compareWithUpstream
    // - gitlens.views.compareWithWorking
    // - gitlens.views.contributors.focus
    // - gitlens.views.contributors.refresh
    // - gitlens.views.contributors.removeView
    // - gitlens.views.contributors.resetViewLocation
    // - gitlens.views.contributors.setFilesLayoutToAuto
    // - gitlens.views.contributors.setFilesLayoutToList
    // - gitlens.views.contributors.setFilesLayoutToTree
    // - gitlens.views.contributors.setShowAllBranchesOff
    // - gitlens.views.contributors.setShowAllBranchesOn
    // - gitlens.views.contributors.setShowAvatarsOff
    // - gitlens.views.contributors.setShowAvatarsOn
    // - gitlens.views.contributors.setShowStatisticsOff
    // - gitlens.views.contributors.setShowStatisticsOn
    // - gitlens.views.contributors.toggleVisibility
    // - gitlens.views.copy
    // - gitlens.views.createBranch
    // - gitlens.views.createPullRequest
    // - gitlens.views.createTag
    // - gitlens.views.createWorktree
    // - gitlens.views.deleteBranch
    // - gitlens.views.deleteStash
    // - gitlens.views.deleteTag
    // - gitlens.views.deleteWorktree
    // - gitlens.views.dismissNode
    // - gitlens.views.editNode
    // - gitlens.views.expandNode
    // - gitlens.views.fetch
    // - gitlens.views.fileHistory.changeBase
    // - gitlens.views.fileHistory.focus
    // - gitlens.views.fileHistory.refresh
    // - gitlens.views.fileHistory.removeView
    // - gitlens.views.fileHistory.resetViewLocation
    // - gitlens.views.fileHistory.setCursorFollowingOff
    // - gitlens.views.fileHistory.setCursorFollowingOn
    // - gitlens.views.fileHistory.setEditorFollowingOff
    // - gitlens.views.fileHistory.setEditorFollowingOn
    // - gitlens.views.fileHistory.setRenameFollowingOff
    // - gitlens.views.fileHistory.setRenameFollowingOn
    // - gitlens.views.fileHistory.setShowAllBranchesOff
    // - gitlens.views.fileHistory.setShowAllBranchesOn
    // - gitlens.views.fileHistory.setShowAvatarsOff
    // - gitlens.views.fileHistory.setShowAvatarsOn
    // - gitlens.views.fileHistory.toggleVisibility
    // - gitlens.views.highlightChanges
    // - gitlens.views.highlightRevisionChanges
    // - gitlens.views.home.focus
    // - gitlens.views.home.refresh
    // - gitlens.views.home.removeView
    // - gitlens.views.home.resetViewLocation
    // - gitlens.views.home.toggleVisibility
    // - gitlens.views.lineHistory.changeBase
    // - gitlens.views.lineHistory.focus
    // - gitlens.views.lineHistory.refresh
    // - gitlens.views.lineHistory.removeView
    // - gitlens.views.lineHistory.resetViewLocation
    // - gitlens.views.lineHistory.setEditorFollowingOff
    // - gitlens.views.lineHistory.setEditorFollowingOn
    // - gitlens.views.lineHistory.setShowAvatarsOff
    // - gitlens.views.lineHistory.setShowAvatarsOn
    // - gitlens.views.lineHistory.toggleVisibility
    // - gitlens.views.loadAllChildren
    // - gitlens.views.loadMoreChildren
    // - gitlens.views.mergeBranchInto
    // - gitlens.views.openChangedFileDiffs
    // - gitlens.views.openChangedFileDiffsWithWorking
    // - gitlens.views.openChangedFileRevisions
    // - gitlens.views.openChangedFiles
    // - gitlens.views.openChanges
    // - gitlens.views.openChangesWithWorking
    // - gitlens.views.openDirectoryDiff
    // - gitlens.views.openDirectoryDiffWithWorking
    // - gitlens.views.openFile
    // - gitlens.views.openFileRevision
    // - gitlens.views.openInTerminal
    // - gitlens.views.openPreviousChangesWithWorking
    // - gitlens.views.openPullRequest
    // - gitlens.views.openWorktree
    // - gitlens.views.openWorktreeInNewWindow
    // - gitlens.views.pruneRemote
    // - gitlens.views.publishBranch
    // - gitlens.views.publishRepository
    // - gitlens.views.pull
    // - gitlens.views.push
    // - gitlens.views.pushToCommit
    // - gitlens.views.pushWithForce
    // - gitlens.views.rebaseOntoBranch
    // - gitlens.views.rebaseOntoCommit
    // - gitlens.views.rebaseOntoUpstream
    // - gitlens.views.refreshNode
    // - gitlens.views.remotes.focus
    // - gitlens.views.remotes.refresh
    // - gitlens.views.remotes.removeView
    // - gitlens.views.remotes.resetViewLocation
    // - gitlens.views.remotes.setFilesLayoutToAuto
    // - gitlens.views.remotes.setFilesLayoutToList
    // - gitlens.views.remotes.setFilesLayoutToTree
    // - gitlens.views.remotes.setLayoutToList
    // - gitlens.views.remotes.setLayoutToTree
    // - gitlens.views.remotes.setShowAvatarsOff
    // - gitlens.views.remotes.setShowAvatarsOn
    // - gitlens.views.remotes.setShowBranchPullRequestOff
    // - gitlens.views.remotes.setShowBranchPullRequestOn
    // - gitlens.views.remotes.toggleVisibility
    // - gitlens.views.removeRemote
    // - gitlens.views.renameBranch
    // - gitlens.views.repositories.focus
    // - gitlens.views.repositories.refresh
    // - gitlens.views.repositories.removeView
    // - gitlens.views.repositories.resetViewLocation
    // - gitlens.views.repositories.setAutoRefreshToOff
    // - gitlens.views.repositories.setAutoRefreshToOn
    // - gitlens.views.repositories.setBranchesLayoutToList
    // - gitlens.views.repositories.setBranchesLayoutToTree
    // - gitlens.views.repositories.setBranchesShowBranchComparisonOff
    // - gitlens.views.repositories.setBranchesShowBranchComparisonOn
    // - gitlens.views.repositories.setFilesLayoutToAuto
    // - gitlens.views.repositories.setFilesLayoutToList
    // - gitlens.views.repositories.setFilesLayoutToTree
    // - gitlens.views.repositories.setShowAvatarsOff
    // - gitlens.views.repositories.setShowAvatarsOn
    // - gitlens.views.repositories.setShowBranchComparisonOff
    // - gitlens.views.repositories.setShowBranchComparisonOn
    // - gitlens.views.repositories.setShowBranchesOff
    // - gitlens.views.repositories.setShowBranchesOn
    // - gitlens.views.repositories.setShowCommitsOff
    // - gitlens.views.repositories.setShowCommitsOn
    // - gitlens.views.repositories.setShowContributorsOff
    // - gitlens.views.repositories.setShowContributorsOn
    // - gitlens.views.repositories.setShowRemotesOff
    // - gitlens.views.repositories.setShowRemotesOn
    // - gitlens.views.repositories.setShowSectionOff
    // - gitlens.views.repositories.setShowStashesOff
    // - gitlens.views.repositories.setShowStashesOn
    // - gitlens.views.repositories.setShowTagsOff
    // - gitlens.views.repositories.setShowTagsOn
    // - gitlens.views.repositories.setShowUpstreamStatusOff
    // - gitlens.views.repositories.setShowUpstreamStatusOn
    // - gitlens.views.repositories.setShowWorktreesOff
    // - gitlens.views.repositories.setShowWorktreesOn
    // - gitlens.views.repositories.toggleVisibility
    // - gitlens.views.resetCommit
    // - gitlens.views.resetToCommit
    // - gitlens.views.restore
    // - gitlens.views.revealWorktreeInExplorer
    // - gitlens.views.revert
    // - gitlens.views.searchAndCompare.clear
    // - gitlens.views.searchAndCompare.compareWithSelected
    // - gitlens.views.searchAndCompare.focus
    // - gitlens.views.searchAndCompare.pin
    // - gitlens.views.searchAndCompare.refresh
    // - gitlens.views.searchAndCompare.removeView
    // - gitlens.views.searchAndCompare.resetViewLocation
    // - gitlens.views.searchAndCompare.searchCommits
    // - gitlens.views.searchAndCompare.selectForCompare
    // - gitlens.views.searchAndCompare.setFilesFilterOff
    // - gitlens.views.searchAndCompare.setFilesFilterOnLeft
    // - gitlens.views.searchAndCompare.setFilesFilterOnRight
    // - gitlens.views.searchAndCompare.setFilesLayoutToAuto
    // - gitlens.views.searchAndCompare.setFilesLayoutToList
    // - gitlens.views.searchAndCompare.setFilesLayoutToTree
    // - gitlens.views.searchAndCompare.setKeepResultsToOff
    // - gitlens.views.searchAndCompare.setKeepResultsToOn
    // - gitlens.views.searchAndCompare.setShowAvatarsOff
    // - gitlens.views.searchAndCompare.setShowAvatarsOn
    // - gitlens.views.searchAndCompare.swapComparison
    // - gitlens.views.searchAndCompare.toggleVisibility
    // - gitlens.views.searchAndCompare.unpin
    // - gitlens.views.selectFileForCompare
    // - gitlens.views.selectForCompare
    // - gitlens.views.setAsDefault
    // - gitlens.views.setBranchComparisonToBranch
    // - gitlens.views.setBranchComparisonToWorking
    // - gitlens.views.setShowRelativeDateMarkersOff
    // - gitlens.views.setShowRelativeDateMarkersOn
    // - gitlens.views.stageDirectory
    // - gitlens.views.stageFile
    // - gitlens.views.star
    // - gitlens.views.stashes.focus
    // - gitlens.views.stashes.refresh
    // - gitlens.views.stashes.removeView
    // - gitlens.views.stashes.resetViewLocation
    // - gitlens.views.stashes.setFilesLayoutToAuto
    // - gitlens.views.stashes.setFilesLayoutToList
    // - gitlens.views.stashes.setFilesLayoutToTree
    // - gitlens.views.stashes.toggleVisibility
    // - gitlens.views.switchToAnotherBranch
    // - gitlens.views.switchToBranch
    // - gitlens.views.switchToCommit
    // - gitlens.views.switchToTag
    // - gitlens.views.tags.focus
    // - gitlens.views.tags.refresh
    // - gitlens.views.tags.removeView
    // - gitlens.views.tags.resetViewLocation
    // - gitlens.views.tags.setFilesLayoutToAuto
    // - gitlens.views.tags.setFilesLayoutToList
    // - gitlens.views.tags.setFilesLayoutToTree
    // - gitlens.views.tags.setLayoutToList
    // - gitlens.views.tags.setLayoutToTree
    // - gitlens.views.tags.setShowAvatarsOff
    // - gitlens.views.tags.setShowAvatarsOn
    // - gitlens.views.tags.toggleVisibility
    // - gitlens.views.timeline.focus
    // - gitlens.views.timeline.openInTab
    // - gitlens.views.timeline.refresh
    // - gitlens.views.timeline.removeView
    // - gitlens.views.timeline.resetViewLocation
    // - gitlens.views.timeline.toggleVisibility
    // - gitlens.views.title.applyStash
    // - gitlens.views.title.createBranch
    // - gitlens.views.title.createTag
    // - gitlens.views.title.createWorktree
    // - gitlens.views.undoCommit
    // - gitlens.views.unsetAsDefault
    // - gitlens.views.unstageDirectory
    // - gitlens.views.unstageFile
    // - gitlens.views.unstar
    // - gitlens.views.worktrees.focus
    // - gitlens.views.worktrees.refresh
    // - gitlens.views.worktrees.removeView
    // - gitlens.views.worktrees.resetViewLocation
    // - gitlens.views.worktrees.setFilesLayoutToAuto
    // - gitlens.views.worktrees.setFilesLayoutToList
    // - gitlens.views.worktrees.setFilesLayoutToTree
    // - gitlens.views.worktrees.setShowAvatarsOff
    // - gitlens.views.worktrees.setShowAvatarsOn
    // - gitlens.views.worktrees.setShowBranchComparisonOff
    // - gitlens.views.worktrees.setShowBranchComparisonOn
    // - gitlens.views.worktrees.setShowBranchPullRequestOff
    // - gitlens.views.worktrees.setShowBranchPullRequestOn
    // - gitlens.views.worktrees.toggleVisibility
    // - goToNextReferenceFromEmbeddedEditor
    // - goToPreviousReferenceFromEmbeddedEditor
    // - help.tweetFeedback
    // - imagePreview.zoomIn
    // - imagePreview.zoomOut
    // - inlayHints.startReadingLineWithHint
    // - interactive.history.focus
    // - interactive.input.clear
    // - interactive.input.focus
    // - ipynb.cleanInvalidImageAttachment
    // - ipynb.newUntitledIpynb
    // - ipynb.openIpynbInNotebookEditor
    // - javascript-walkthrough.commands.createJsFile
    // - javascript-walkthrough.commands.debugJsFile
    // - javascript.goToProjectConfig
    // - javascript.reloadProjects
    // - javascript.removeUnusedImports
    // - javascript.sortImports
    // - jsBrowserBreakpoints.focus
    // - jsBrowserBreakpoints.resetViewLocation
    // - jsExcludedCallers.focus
    // - jsExcludedCallers.resetViewLocation
    // - json.clearCache
    // - json.sort
    // - keybindings.editor.clearSearchHistory
    // - keybindings.editor.copyCommandKeybindingEntry
    // - keybindings.editor.copyCommandTitle
    // - keybindings.editor.resetKeybinding
    // - keybindings.editor.showConflicts
    // - keybindings.editor.showDefaultKeybindings
    // - keybindings.editor.showExtensionKeybindings
    // - keybindings.editor.showUserKeybindings
    // - lastCursorLineSelect
    // - lastCursorLineSelectDrag
    // - lastCursorWordSelect
    // - layoutEditorGroups
    // - list.collapseAllToFocus
    // - list.focusParent
    // - list.scrollLeft
    // - list.scrollRight
    // - list.selectAndPreserveFocus
    // - list.toggleFilterOnType
    // - list.toggleFindMode
    // - list.triggerTypeNavigation
    // - makefile.buildAll
    // - makefile.buildCleanAll
    // - makefile.buildCleanTarget
    // - makefile.buildTarget
    // - makefile.cleanConfigure
    // - makefile.configure
    // - makefile.getLaunchTargetArgs
    // - makefile.getLaunchTargetArgsConcat
    // - makefile.getLaunchTargetDirectory
    // - makefile.getLaunchTargetFileName
    // - makefile.getLaunchTargetPath
    // - makefile.launchDebug
    // - makefile.launchRun
    // - makefile.launchTargetFileName
    // - makefile.launchTargetPath
    // - makefile.makeBaseDirectory
    // - makefile.outline.buildCleanTarget
    // - makefile.outline.buildTarget
    // - makefile.outline.cleanConfigure
    // - makefile.outline.configure
    // - makefile.outline.focus
    // - makefile.outline.launchDebug
    // - makefile.outline.launchRun
    // - makefile.outline.preConfigure
    // - makefile.outline.resetViewLocation
    // - makefile.outline.setBuildConfiguration
    // - makefile.outline.setBuildTarget
    // - makefile.outline.setLaunchConfiguration
    // - makefile.preConfigure
    // - makefile.resetState
    // - makefile.setBuildConfiguration
    // - makefile.setBuildTarget
    // - makefile.setLaunchConfiguration
    // - markdown.editor.insertImageFromWorkspace
    // - markdown.editor.insertLinkFromWorkspace
    // - markdown.findAllFileReferences
    // - markdown.preview.refresh
    // - markdown.preview.toggleLock
    // - markdown.showLockedPreviewToSide
    // - markdown.showPreviewSecuritySelector
    // - markdown.showSource
    // - menu.resetHiddenStates
    // - merge-conflict.accept.all-both
    // - merge-conflict.accept.all-current
    // - merge-conflict.accept.all-incoming
    // - merge-conflict.accept.both
    // - merge-conflict.accept.current
    // - merge-conflict.accept.incoming
    // - merge-conflict.accept.selection
    // - merge-conflict.compare
    // - merge-conflict.next
    // - merge-conflict.previous
    // - merge.acceptAllInput1
    // - merge.acceptAllInput2
    // - merge.columnLayout
    // - merge.dev.copyContentsJson
    // - merge.dev.loadContentsFromFolder
    // - merge.dev.openContentsJson
    // - merge.dev.openSelectionInTemporaryMergeEditor
    // - merge.dev.saveContentsToFolder
    // - merge.goToNextUnhandledConflict
    // - merge.goToPreviousUnhandledConflict
    // - merge.mixedLayout
    // - merge.openBaseEditor
    // - merge.openResult
    // - merge.showBase
    // - merge.showBaseCenter
    // - merge.showBaseTop
    // - merge.showNonConflictingChanges
    // - merge.toggleActiveConflictInput1
    // - merge.toggleActiveConflictInput2
    // - mergeEditor.acceptMerge
    // - mergeEditor.compareInput1WithBase
    // - mergeEditor.compareInput2WithBase
    // - mergeEditor.resetCloseWithConflictsChoice
    // - mergeEditor.resetResultToBaseAndAutoMerge
    // - noop
    // - notebook.cancelExecution
    // - notebook.cell.cancelExecution
    // - notebook.cell.changeLanguage
    // - notebook.cell.collapseAllCellInputs
    // - notebook.cell.collapseAllCellOutputs
    // - notebook.cell.copy
    // - notebook.cell.cut
    // - notebook.cell.executeAndFocusContainer
    // - notebook.cell.executeCellAndBelow
    // - notebook.cell.executeCellsAbove
    // - notebook.cell.expandAllCellInputs
    // - notebook.cell.expandAllCellOutputs
    // - notebook.cell.insertCodeCellAboveAndFocusContainer
    // - notebook.cell.insertCodeCellAtTop
    // - notebook.cell.insertCodeCellBelowAndFocusContainer
    // - notebook.cell.insertMarkdownCellAbove
    // - notebook.cell.insertMarkdownCellAtTop
    // - notebook.cell.insertMarkdownCellBelow
    // - notebook.cell.joinSelected
    // - notebook.cell.paste
    // - notebook.cell.toggleLineNumbers
    // - notebook.cell.toggleOutputs
    // - notebook.clearAllCellsOutputs
    // - notebook.clearNotebookEdtitorTypeCache
    // - notebook.clearNotebookKernelsMRUCache
    // - notebook.diff.cell.revertInput
    // - notebook.diff.cell.revertMetadata
    // - notebook.diff.cell.revertOutputs
    // - notebook.diff.cell.switchOutputRenderingStyleToText
    // - notebook.diff.showMetadata
    // - notebook.diff.showOutputs
    // - notebook.diff.switchToText
    // - notebook.execute
    // - notebook.inspectLayout
    // - notebook.interruptExecution
    // - notebook.renderAllMarkdownCells
    // - notebook.revealLastFailedCell
    // - notebook.revealRunningCell
    // - notebook.saveMimeTypeOrder
    // - notebook.setProfile
    // - notebook.toggleCellToolbarPosition
    // - notebook.toggleCellToolbarPositionFromEditorTitle
    // - notebook.toggleLayoutTroubleshoot
    // - notebook.toggleLineNumbers
    // - notebook.toggleLineNumbersFromEditorTitle
    // - notifications.clearAll
    // - notifications.focusToasts
    // - notifications.showList
    // - notifications.toggleDoNotDisturbMode
    // - notifications.toggleList
    // - npm.debugScript
    // - npm.debugScriptFromHover
    // - npm.focus
    // - npm.openScript
    // - npm.packageManager
    // - npm.refresh
    // - npm.resetViewLocation
    // - npm.runInstall
    // - npm.runScript
    // - npm.runScriptFromFolder
    // - npm.runScriptFromHover
    // - npm.runSelectedScript
    // - openEditors.closeAll
    // - openEditors.newUntitledFile
    // - openInTerminal
    // - openReference
    // - opensshremotes.addNewSshHost
    // - opensshremotes.cleanCurrentRemoteServer
    // - opensshremotes.cleanDevBox
    // - opensshremotes.cleanLocalServer
    // - opensshremotes.cleanRemoteServer
    // - opensshremotes.getHelp
    // - opensshremotes.getStarted
    // - opensshremotes.openConfigFile
    // - opensshremotes.openEmptyWindow
    // - opensshremotes.openEmptyWindowInCurrentWindow
    // - opensshremotes.openEmptyWindowOnCurrentHost
    // - opensshremotes.openWebUI
    // - opensshremotes.provideFeedback
    // - opensshremotes.reportIssue
    // - opensshremotes.settings
    // - opensshremotes.showLog
    // - outline.collapse
    // - outline.expand
    // - outline.filterOnType
    // - outline.focus
    // - outline.followCursor
    // - outline.removeView
    // - outline.resetViewLocation
    // - outline.sortByKind
    // - outline.sortByName
    // - outline.sortByPosition
    // - outline.toggleVisibility
    // - paste
    // - perf.event.profiling
    // - perf.insta.printAsyncCycles
    // - perf.insta.printTraces
    // - perfview.show
    // - prettier.createConfigFile
    // - prettier.forceFormatDocument
    // - prettier.openOutput
    // - problems.action.copyMessage
    // - problems.action.copyRelatedInformationMessage
    // - problems.action.showMultilineMessage
    // - problems.action.showSinglelineMessage
    // - pylance.addToExtraPaths
    // - pylance.completionAccepted
    // - pylance.convertImportFormat
    // - pylance.dumpCachedTypes
    // - pylance.dumpCodeFlowGraph
    // - pylance.dumpNodes
    // - pylance.dumpTokens
    // - pylance.dumpTypes
    // - pylance.executedClientCommand
    // - pylance.extractMethod
    // - pylance.extractMethodWithRename
    // - pylance.extractVariable
    // - pylance.extractVariableWithRename
    // - pylance.fixAll
    // - pylance.getSourceFiles
    // - pylance.moveSymbol
    // - pylance.moveSymbolWithFileSelection
    // - pylance.pytest.addAllFixtureTypeAnnotations
    // - pylance.pytest.addFixtureTypeAnnotation
    // - pylance.reportIssue
    // - pylance.runCommands
    // - pylance.setTypeChecking
    // - pylance.triggerParameterHints
    // - pyright.addoptionalforparam
    // - pyright.createtypestub
    // - pyright.dumpFileDebugInfo
    // - pyright.organizeimports
    // - python.SelectAndInsertDebugConfiguration
    // - python._loadLanguageServerExtension
    // - python.addImport
    // - python.addOptionalForParam
    // - python.analysis.restartLanguageServer
    // - python.clearCacheAndReload
    // - python.clearWorkspaceInterpreter
    // - python.configureTests
    // - python.createEnvironment
    // - python.createNewFile
    // - python.createTerminal
    // - python.createTypeStub
    // - python.debugInTerminal
    // - python.enableLinting
    // - python.enableSourceMapSupport
    // - python.execInTerminal
    // - python.execInTerminal-icon
    // - python.execSelectionInDjangoShell
    // - python.installPython
    // - python.installPythonOnLinux
    // - python.installPythonOnMac
    // - python.intellicode.completionItemSelected
    // - python.intellicode.loadLanguageServerExtension
    // - python.interpreterPath
    // - python.launchTensorBoard
    // - python.orderImports
    // - python.pickLocalProcess
    // - python.reloadVSCode
    // - python.removeUnusedImport
    // - python.reportIssue
    // - python.runLinting
    // - python.setInterpreter
    // - python.setLinter
    // - python.sortImports
    // - python.startREPL
    // - python.triggerEnvSelection
    // - python.viewLanguageServerOutput
    // - python.viewOutput
    // - refactorPreview
    // - refactorPreview.discard
    // - refactorPreview.focus
    // - refactorPreview.groupByFile
    // - refactorPreview.groupByType
    // - refactorPreview.resetViewContainerLocation
    // - refactorPreview.resetViewLocation
    // - refactorPreview.toggleGrouping
    // - references-view.clear
    // - references-view.clearHistory
    // - references-view.copy
    // - references-view.copyAll
    // - references-view.copyPath
    // - references-view.findImplementations
    // - references-view.pickFromHistory
    // - references-view.refind
    // - references-view.refresh
    // - references-view.removeCallItem
    // - references-view.removeReferenceItem
    // - references-view.removeTypeItem
    // - references-view.showIncomingCalls
    // - references-view.showOutgoingCalls
    // - references-view.showSubtypes
    // - references-view.showSupertypes
    // - references-view.showTypeHierarchy
    // - references-view.tree.focus
    // - references-view.tree.resetViewLocation
    // - remote-containers.addExtensionToConfig
    // - remote-containers.attachToContainer
    // - remote-containers.attachToContainerNewWindow
    // - remote-containers.attachToK8sContainerFromViewlet
    // - remote-containers.attachToRunningContainer
    // - remote-containers.attachToRunningContainerFromViewlet
    // - remote-containers.checkoutPRInVolume
    // - remote-containers.cloneInVolume
    // - remote-containers.cloneInVolumeFromViewlet
    // - remote-containers.cloneRepositoryInVolumeFromViewlet
    // - remote-containers.configureContainerFeatures
    // - remote-containers.createDevContainer
    // - remote-containers.createDevContainerFile
    // - remote-containers.explorerDetailsRefresh
    // - remote-containers.explorerTargetsRefresh
    // - remote-containers.explorerVolumesRefresh
    // - remote-containers.getHelp
    // - remote-containers.getStarted
    // - remote-containers.inspectDockerResource
    // - remote-containers.inspectInBasicDevContainer
    // - remote-containers.inspectVolume
    // - remote-containers.inspectVolumeFromViewlet
    // - remote-containers.installDocker
    // - remote-containers.installUserCLI
    // - remote-containers.labelPortAndUpdateConfig
    // - remote-containers.newContainer
    // - remote-containers.openAttachConfigByNameFile
    // - remote-containers.openAttachDevContainerFile
    // - remote-containers.openDevContainerFile
    // - remote-containers.openFolder
    // - remote-containers.openInformationAboutMountPerformance
    // - remote-containers.openLastLogFile
    // - remote-containers.openLogFile
    // - remote-containers.openPullRequestInVolume
    // - remote-containers.openRepositoryFromGitWithEditSession
    // - remote-containers.openRepositoryFromRemoteHubWithEditSession
    // - remote-containers.openRepositoryInUniqueVolume
    // - remote-containers.openRepositoryInVolume
    // - remote-containers.openWorkspace
    // - remote-containers.provideFeedback
    // - remote-containers.pruneVolumes
    // - remote-containers.rebuildAndReopenInContainer
    // - remote-containers.rebuildContainer
    // - remote-containers.rebuildContainerNoCache
    // - remote-containers.rebuildNoCacheAndReopenInContainer
    // - remote-containers.removeContainer
    // - remote-containers.removeRecentFolder
    // - remote-containers.removeVolume
    // - remote-containers.reopenInContainer
    // - remote-containers.reopenInSSH
    // - remote-containers.reopenInWSL
    // - remote-containers.reopenLocally
    // - remote-containers.reportIssue
    // - remote-containers.revealLogTerminal
    // - remote-containers.revealPostCreateTerminal
    // - remote-containers.settings
    // - remote-containers.showContainerLog
    // - remote-containers.showDetails
    // - remote-containers.showRecoveryContainerNotificationReset
    // - remote-containers.showReopenInContainerNotificationReset
    // - remote-containers.startAndOpenFolder
    // - remote-containers.startContainer
    // - remote-containers.stopContainer
    // - remote-containers.trySample
    // - remote-explorer.add
    // - remote-explorer.configureSsh
    // - remote-explorer.connectToFolderInCurrentWindow
    // - remote-explorer.connectToFolderInNewWindow
    // - remote-explorer.connectToRemoteInCurrentWindow
    // - remote-explorer.connectToRemoteInNewWindow
    // - remote-explorer.deleteFolderHistoryItem
    // - remote-explorer.refresh
    // - remote-explorer.signIntoTunnel
    // - remote-explorer.unregisterTunnel
    // - remote.explorer.switch
    // - remote.tunnel.changeLocalPort
    // - remote.tunnel.closeCommandPalette
    // - remote.tunnel.copyAddressCommandPalette
    // - remote.tunnel.forwardCommandPalette
    // - remote.tunnel.forwardInline
    // - remote.tunnel.open
    // - remote.tunnel.openCommandPalette
    // - remote.tunnel.openPreview
    // - remote.tunnel.setProtocolHttp
    // - remote.tunnel.setProtocolHttps
    // - remoteTargets.focus
    // - remoteTargets.resetViewLocation
    // - removeRootFolder
    // - repl.action.copyAll
    // - replacePreviousChar
    // - resetGettingStartedProgress
    // - revealInExplorer
    // - scm.openInTerminal
    // - scrollEditorBottom
    // - scrollEditorTop
    // - scrollLeft
    // - scrollRight
    // - search.action.clearHistory
    // - search.action.clearSearchResults
    // - search.action.collapseSearchResults
    // - search.action.copyAll
    // - search.action.excludeFromSearch
    // - search.action.expandSearchResults
    // - search.action.focusFilesToExclude
    // - search.action.focusFilesToInclude
    // - search.action.focusSearchList
    // - search.action.openEditor
    // - search.action.openNewEditor
    // - search.action.openNewEditorFromView
    // - search.action.openNewEditorToSide
    // - search.action.refreshSearchResults
    // - search.action.revealInSideBar
    // - search.action.viewAsList
    // - search.action.viewAsTree
    // - selectFirstSuggestion
    // - selectForCompare
    // - selectLastSuggestion
    // - setRootFolder
    // - setSelection
    // - settings.filterByOnline
    // - settings.filterUntrusted
    // - settings.switchToJSON
    // - showEditorScreenReaderNotification
    // - simpleBrowser.show
    // - targetsContainers.focus
    // - targetsContainers.resetViewLocation
    // - terminal.focus
    // - terminal.removeView
    // - terminal.resetViewContainerLocation
    // - terminal.resetViewLocation
    // - terminal.toggleVisibility
    // - testing.cancelTestRefresh
    // - testing.clearTestResults
    // - testing.collapseAll
    // - testing.configureProfile
    // - testing.debug
    // - testing.debugSelected
    // - testing.hideTest
    // - testing.openMessageInEditor
    // - testing.run
    // - testing.runSelected
    // - testing.runUsing
    // - testing.searchForTestExtension
    // - testing.selectDefaultTestProfiles
    // - testing.sortByDuration
    // - testing.sortByLocation
    // - testing.sortByStatus
    // - testing.startContinuousRun
    // - testing.stopContinuousRun
    // - testing.unhideAllTests
    // - testing.unhideTest
    // - testing.viewAsList
    // - testing.viewAsTree
    // - timeline.focus
    // - timeline.refresh
    // - timeline.removeView
    // - timeline.resetViewLocation
    // - timeline.toggleExcludeSource:git-history
    // - timeline.toggleExcludeSource:timeline.localHistory
    // - timeline.toggleFollowActiveEditor
    // - timeline.toggleVisibility
    // - toggle.diff.ignoreTrimWhitespace
    // - toggle.diff.renderSideBySide
    // - toggle.window.commandCenter
    // - toggle.workbench.layoutControl.enabled
    // - toggleEscapeSequenceLogging
    // - toggleVim
    // - type
    // - typescript.findAllFileReferences
    // - typescript.goToProjectConfig
    // - typescript.goToSourceDefinition
    // - typescript.openTsServerLog
    // - typescript.reloadProjects
    // - typescript.removeUnusedImports
    // - typescript.restartTsServer
    // - typescript.selectTypeScriptVersion
    // - typescript.sortImports
    // - typescript.tsserverRequest
    // - update.check
    // - update.checkForUpdate
    // - update.checking
    // - update.downloadNow
    // - update.downloadUpdate
    // - update.downloading
    // - update.install
    // - update.installUpdate
    // - update.restart
    // - update.restartToUpdate
    // - update.showCurrentReleaseNotes
    // - update.updating
    // - userDataProfiles
    // - userDataProfiles.resetViewContainerLocation
    // - variables.collapse
    // - vim.editVimrc
    // - vim.remap
    // - vim.showQuickpickCmdLine
    // - vsintellicode.completionItemSelected
    // - walkthroughs.selectStep
    // - watch.collapse
    // - welcome.markStepComplete
    // - welcome.markStepIncomplete
    // - welcome.showAllWalkthroughs
    // - workbench.action.acceptSelectedQuickOpenItem
    // - workbench.action.addComment
    // - workbench.action.addRootFolder
    // - workbench.action.alignPanelCenter
    // - workbench.action.alignPanelJustify
    // - workbench.action.alignPanelLeft
    // - workbench.action.alignPanelRight
    // - workbench.action.alternativeAcceptSelectedQuickOpenItem
    // - workbench.action.blur
    // - workbench.action.clearCommandHistory
    // - workbench.action.clearEditorHistory
    // - workbench.action.clearLocalePreference
    // - workbench.action.clearRecentFiles
    // - workbench.action.closeActivePinnedEditor
    // - workbench.action.closeAuxiliaryBar
    // - workbench.action.closeEditorInAllGroups
    // - workbench.action.closeEditorsAndGroup
    // - workbench.action.closeEditorsInOtherGroups
    // - workbench.action.closeEditorsToTheLeft
    // - workbench.action.closeEditorsToTheRight
    // - workbench.action.closePanel
    // - workbench.action.closeSidebar
    // - workbench.action.collapseAllComments
    // - workbench.action.compareEditor.focusOtherSide
    // - workbench.action.compareEditor.focusPrimarySide
    // - workbench.action.compareEditor.focusSecondarySide
    // - workbench.action.configureLanguageBasedSettings
    // - workbench.action.configureLocale
    // - workbench.action.configureRuntimeArguments
    // - workbench.action.continueOn.extensions
    // - workbench.action.createTerminalEditor
    // - workbench.action.createTerminalEditorSide
    // - workbench.action.customizeLayout
    // - workbench.action.debug.callStackBottom
    // - workbench.action.debug.callStackDown
    // - workbench.action.debug.callStackTop
    // - workbench.action.debug.callStackUp
    // - workbench.action.debug.configure
    // - workbench.action.debug.disconnectAndSuspend
    // - workbench.action.debug.focusProcess
    // - workbench.action.debug.restartFrame
    // - workbench.action.debug.reverseContinue
    // - workbench.action.debug.selectDebugConsole
    // - workbench.action.debug.selectDebugSession
    // - workbench.action.debug.selectRepl
    // - workbench.action.debug.selectandstart
    // - workbench.action.debug.showLoadedScripts
    // - workbench.action.debug.stepBack
    // - workbench.action.debug.terminateThread
    // - workbench.action.decreaseViewHeight
    // - workbench.action.decreaseViewSize
    // - workbench.action.decreaseViewWidth
    // - workbench.action.download
    // - workbench.action.duplicateActiveEditorGroupDown
    // - workbench.action.duplicateActiveEditorGroupLeft
    // - workbench.action.duplicateActiveEditorGroupRight
    // - workbench.action.duplicateActiveEditorGroupUp
    // - workbench.action.duplicateWorkspaceInNewWindow
    // - workbench.action.editor.changeEOL
    // - workbench.action.editor.changeEncoding
    // - workbench.action.editorLayoutSingle
    // - workbench.action.editorLayoutThreeColumns
    // - workbench.action.editorLayoutThreeRows
    // - workbench.action.editorLayoutTwoByTwoGrid
    // - workbench.action.editorLayoutTwoColumns
    // - workbench.action.editorLayoutTwoColumnsBottom
    // - workbench.action.editorLayoutTwoRows
    // - workbench.action.editorLayoutTwoRowsRight
    // - workbench.action.evenEditorWidths
    // - workbench.action.expandAllComments
    // - workbench.action.extensionHostProfiler.stop
    // - workbench.action.files.newFile
    // - workbench.action.files.openFileFolderInNewWindow
    // - workbench.action.files.openFileInNewWindow
    // - workbench.action.files.openFolder
    // - workbench.action.files.openFolderInNewWindow
    // - workbench.action.files.revert
    // - workbench.action.files.saveAll
    // - workbench.action.files.saveFiles
    // - workbench.action.firstEditorInGroup
    // - workbench.action.focusAboveGroupWithoutWrap
    // - workbench.action.focusActiveEditorGroup
    // - workbench.action.focusActivityBar
    // - workbench.action.focusAuxiliaryBar
    // - workbench.action.focusBanner
    // - workbench.action.focusBelowGroupWithoutWrap
    // - workbench.action.focusCommentsPanel
    // - workbench.action.focusFirstSideEditor
    // - workbench.action.focusLastEditorGroup
    // - workbench.action.focusLeftGroupWithoutWrap
    // - workbench.action.focusNextGroup
    // - workbench.action.focusOtherSideEditor
    // - workbench.action.focusPanel
    // - workbench.action.focusPreviousGroup
    // - workbench.action.focusQuickOpen
    // - workbench.action.focusRightGroupWithoutWrap
    // - workbench.action.focusSecondSideEditor
    // - workbench.action.focusStatusBar
    // - workbench.action.focusTitleBar
    // - workbench.action.generateColorTheme
    // - workbench.action.increaseViewHeight
    // - workbench.action.increaseViewSize
    // - workbench.action.increaseViewWidth
    // - workbench.action.inspectContextKeys
    // - workbench.action.inspectKeyMappings
    // - workbench.action.inspectKeyMappingsJSON
    // - workbench.action.installCommandLine
    // - workbench.action.joinAllGroups
    // - workbench.action.joinTwoGroups
    // - workbench.action.localHistory.compareWithFile
    // - workbench.action.localHistory.compareWithPrevious
    // - workbench.action.localHistory.compareWithSelected
    // - workbench.action.localHistory.create
    // - workbench.action.localHistory.delete
    // - workbench.action.localHistory.deleteAll
    // - workbench.action.localHistory.open
    // - workbench.action.localHistory.rename
    // - workbench.action.localHistory.restore
    // - workbench.action.localHistory.restoreViaEditor
    // - workbench.action.localHistory.restoreViaPicker
    // - workbench.action.localHistory.revealInOS
    // - workbench.action.localHistory.selectForCompare
    // - workbench.action.lockEditorGroup
    // - workbench.action.logStorage
    // - workbench.action.logWorkingCopies
    // - workbench.action.manageTrustedDomain
    // - workbench.action.maximizeEditor
    // - workbench.action.mergeAllWindowTabs
    // - workbench.action.minimizeOtherEditors
    // - workbench.action.moveEditorToAboveGroup
    // - workbench.action.moveEditorToBelowGroup
    // - workbench.action.moveEditorToLeftGroup
    // - workbench.action.moveEditorToRightGroup
    // - workbench.action.moveFocusedView
    // - workbench.action.movePanelToSecondarySideBar
    // - workbench.action.movePanelToSidePanel
    // - workbench.action.moveSecondarySideBarToPanel
    // - workbench.action.moveSideBarLeft
    // - workbench.action.moveSideBarRight
    // - workbench.action.moveSidePanelToPanel
    // - workbench.action.moveView
    // - workbench.action.moveWindowTabToNewWindow
    // - workbench.action.navigateBackInEditLocations
    // - workbench.action.navigateBackInNavigationLocations
    // - workbench.action.navigateDown
    // - workbench.action.navigateEditorGroups
    // - workbench.action.navigateForwardInEditLocations
    // - workbench.action.navigateForwardInNavigationLocations
    // - workbench.action.navigateLast
    // - workbench.action.navigateLeft
    // - workbench.action.navigatePreviousInEditLocations
    // - workbench.action.navigatePreviousInNavigationLocations
    // - workbench.action.navigateRight
    // - workbench.action.navigateToLastNavigationLocation
    // - workbench.action.navigateUp
    // - workbench.action.newGroupAbove
    // - workbench.action.newGroupBelow
    // - workbench.action.newGroupLeft
    // - workbench.action.newGroupRight
    // - workbench.action.newWindowTab
    // - workbench.action.nextPanelView
    // - workbench.action.nextSideBarView
    // - workbench.action.openAccessibilitySettings
    // - workbench.action.openActiveLogOutputFile
    // - workbench.action.openApplicationSettingsJson
    // - workbench.action.openDefaultKeybindingsFile
    // - workbench.action.openDocumentationUrl
    // - workbench.action.openEditorAtIndex
    // - workbench.action.openExtensionLogsFolder
    // - workbench.action.openFolderSettings
    // - workbench.action.openFolderSettingsFile
    // - workbench.action.openGlobalKeybindingsFile
    // - workbench.action.openGlobalSettings
    // - workbench.action.openIssueReporter
    // - workbench.action.openLicenseUrl
    // - workbench.action.openLogFile
    // - workbench.action.openLogsFolder
    // - workbench.action.openNewsletterSignupUrl
    // - workbench.action.openNextRecentlyUsedEditor
    // - workbench.action.openNextRecentlyUsedEditorInGroup
    // - workbench.action.openPreviousEditorFromHistory
    // - workbench.action.openPreviousRecentlyUsedEditor
    // - workbench.action.openPreviousRecentlyUsedEditorInGroup
    // - workbench.action.openPrivacyStatementUrl
    // - workbench.action.openProcessExplorer
    // - workbench.action.openRawDefaultSettings
    // - workbench.action.openRemoteSettings
    // - workbench.action.openRemoteSettingsFile
    // - workbench.action.openRequestFeatureUrl
    // - workbench.action.openSettings2
    // - workbench.action.openSettingsJson
    // - workbench.action.openSnippets
    // - workbench.action.openTipsAndTricksUrl
    // - workbench.action.openTwitterUrl
    // - workbench.action.openUserDataFolder
    // - workbench.action.openVideoTutorialsUrl
    // - workbench.action.openView
    // - workbench.action.openWalkthrough
    // - workbench.action.openWorkspace
    // - workbench.action.openWorkspaceConfigFile
    // - workbench.action.openWorkspaceFromEditor
    // - workbench.action.openWorkspaceInNewWindow
    // - workbench.action.openWorkspaceSettings
    // - workbench.action.openWorkspaceSettingsFile
    // - workbench.action.output.show.editSessionsSyncLog
    // - workbench.action.output.show.extension-output-VisualStudioExptTeam.intellicode-api-usage-examples-#1-IntelliCode API Examples
    // - workbench.action.output.show.extension-output-VisualStudioExptTeam.intellicode-api-usage-examples-#2-API Usage Examples LSP
    // - workbench.action.output.show.extension-output-VisualStudioExptTeam.vscodeintellicode-#1-VS IntelliCode
    // - workbench.action.output.show.extension-output-eamodio.gitlens-#1-GitLens
    // - workbench.action.output.show.extension-output-esbenp.prettier-vscode-#1-Prettier
    // - workbench.action.output.show.extension-output-ms-python.python-#1-Python
    // - workbench.action.output.show.extension-output-ms-python.python-#2-Python-Testprotokoll
    // - workbench.action.output.show.extension-output-ms-python.python-#3-Python-Sprachserver
    // - workbench.action.output.show.extension-output-ms-vscode.cpptools-#1-remote-attach
    // - workbench.action.output.show.extension-output-ms-vscode.makefile-tools-#1-Makefile tools
    // - workbench.action.output.show.extension-output-vscode.json-language-features-#1-JSON-Sprachserver
    // - workbench.action.output.show.file:///Users/raphaelelicciardo/Library/Application%20Support/Code/logs/20230309T133125/ptyhost.log
    // - workbench.action.output.show.file:///Users/raphaelelicciardo/Library/Application%20Support/Code/logs/20230309T133125/window1/exthost/exthost.log
    // - workbench.action.output.show.file:///Users/raphaelelicciardo/Library/Application%20Support/Code/logs/20230309T133125/window1/exthost/vscode.git/Git.log
    // - workbench.action.output.show.file:///Users/raphaelelicciardo/Library/Application%20Support/Code/logs/20230309T133125/window1/exthost/vscode.github-authentication/GitHub%20Authentication.log
    // - workbench.action.output.show.file:///Users/raphaelelicciardo/Library/Application%20Support/Code/logs/20230309T133125/window1/exthost/vscode.microsoft-authentication/Microsoft%20Authentication.log
    // - workbench.action.output.show.file:///Users/raphaelelicciardo/Library/Application%20Support/Code/logs/20230309T133125/window1/exthost/vscodevim.vim/Vim.log
    // - workbench.action.output.show.mainLog
    // - workbench.action.output.show.notebook.rendering
    // - workbench.action.output.show.remoteTunnelServiceLog
    // - workbench.action.output.show.rendererLog
    // - workbench.action.output.show.sharedLog
    // - workbench.action.output.show.tasks
    // - workbench.action.output.show.userDataSyncLog
    // - workbench.action.pauseSocketWriting
    // - workbench.action.populateFileFromSnippet
    // - workbench.action.positionPanelBottom
    // - workbench.action.positionPanelLeft
    // - workbench.action.positionPanelRight
    // - workbench.action.previewColorTheme
    // - workbench.action.previousPanelView
    // - workbench.action.previousSideBarView
    // - workbench.action.problems.focus
    // - workbench.action.quickOpenLeastRecentlyUsedEditor
    // - workbench.action.quickOpenNavigateNext
    // - workbench.action.quickOpenNavigateNextInTerminalPicker
    // - workbench.action.quickOpenNavigatePrevious
    // - workbench.action.quickOpenNavigatePreviousInTerminalPicker
    // - workbench.action.quickOpenPreviousEditor
    // - workbench.action.quickOpenPreviousRecentlyUsedEditor
    // - workbench.action.quickOpenRecent
    // - workbench.action.quickOpenTerm
    // - workbench.action.quickOpenWithModes
    // - workbench.action.quickPickManyToggle
    // - workbench.action.quickSwitchWindow
    // - workbench.action.reloadWindowWithExtensionsDisabled
    // - workbench.action.remote.close
    // - workbench.action.remote.extensions
    // - workbench.action.removeRootFolder
    // - workbench.action.reopenTextEditor
    // - workbench.action.reopenWithEditor
    // - workbench.action.reportPerformanceIssueUsingReporter
    // - workbench.action.resetFocusedViewLocation
    // - workbench.action.resetViewLocations
    // - workbench.action.restartExtensionHost
    // - workbench.action.revertAndCloseActiveEditor
    // - workbench.action.saveWorkspaceAs
    // - workbench.action.selectIconTheme
    // - workbench.action.selectProductIconTheme
    // - workbench.action.setDefaultLogLevel
    // - workbench.action.setLogLevel
    // - workbench.action.showAboutDialog
    // - workbench.action.showAllEditorsByMostRecentlyUsed
    // - workbench.action.showEditorsInActiveGroup
    // - workbench.action.showEditorsInGroup
    // - workbench.action.showEmmetCommands
    // - workbench.action.showErrorsWarnings
    // - workbench.action.showInteractivePlayground
    // - workbench.action.showInterfaceOverview
    // - workbench.action.showLogs
    // - workbench.action.showNextWindowTab
    // - workbench.action.showOutputChannels
    // - workbench.action.showPreviousWindowTab
    // - workbench.action.showRuntimeExtensions
    // - workbench.action.showWindowLog
    // - workbench.action.splitEditorDown
    // - workbench.action.splitEditorLeft
    // - workbench.action.splitEditorRight
    // - workbench.action.splitEditorToAboveGroup
    // - workbench.action.splitEditorToBelowGroup
    // - workbench.action.splitEditorToFirstGroup
    // - workbench.action.splitEditorToLastGroup
    // - workbench.action.splitEditorToLeftGroup
    // - workbench.action.splitEditorToNextGroup
    // - workbench.action.splitEditorToPreviousGroup
    // - workbench.action.splitEditorToRightGroup
    // - workbench.action.splitEditorUp
    // - workbench.action.stopTracing
    // - workbench.action.tasks.configureDefaultBuildTask
    // - workbench.action.tasks.configureDefaultTestTask
    // - workbench.action.tasks.configureTaskRunner
    // - workbench.action.tasks.manageAutomaticRunning
    // - workbench.action.tasks.openUserTasks
    // - workbench.action.tasks.openWorkspaceFileTasks
    // - workbench.action.tasks.reRunTask
    // - workbench.action.tasks.restartTask
    // - workbench.action.tasks.runTask
    // - workbench.action.tasks.showLog
    // - workbench.action.tasks.showTasks
    // - workbench.action.tasks.terminate
    // - workbench.action.tasks.test
    // - workbench.action.tasks.toggleProblems
    // - workbench.action.terminal.attachToSession
    // - workbench.action.terminal.changeColor
    // - workbench.action.terminal.changeColorInstance
    // - workbench.action.terminal.changeColorPanel
    // - workbench.action.terminal.changeIcon
    // - workbench.action.terminal.changeIconInstance
    // - workbench.action.terminal.changeIconPanel
    // - workbench.action.terminal.clearPreviousSessionHistory
    // - workbench.action.terminal.copyAndClearSelection
    // - workbench.action.terminal.copyLastCommandOutput
    // - workbench.action.terminal.copySelectionAsHtml
    // - workbench.action.terminal.detachSession
    // - workbench.action.terminal.focus
    // - workbench.action.terminal.focusAtIndex1
    // - workbench.action.terminal.focusAtIndex2
    // - workbench.action.terminal.focusAtIndex3
    // - workbench.action.terminal.focusAtIndex4
    // - workbench.action.terminal.focusAtIndex5
    // - workbench.action.terminal.focusAtIndex6
    // - workbench.action.terminal.focusAtIndex7
    // - workbench.action.terminal.focusAtIndex8
    // - workbench.action.terminal.focusAtIndex9
    // - workbench.action.terminal.gitCreateProfileButton
    // - workbench.action.terminal.join
    // - workbench.action.terminal.joinInstance
    // - workbench.action.terminal.kill
    // - workbench.action.terminal.killAll
    // - workbench.action.terminal.moveToEditor
    // - workbench.action.terminal.moveToEditorInstance
    // - workbench.action.terminal.moveToTerminalPanel
    // - workbench.action.terminal.new
    // - workbench.action.terminal.newInActiveWorkspace
    // - workbench.action.terminal.newWithProfile
    // - workbench.action.terminal.openFileLink
    // - workbench.action.terminal.openSettings
    // - workbench.action.terminal.openUrlLink
    // - workbench.action.terminal.relaunch
    // - workbench.action.terminal.rename
    // - workbench.action.terminal.renamePanel
    // - workbench.action.terminal.runActiveFile
    // - workbench.action.terminal.runSelectedText
    // - workbench.action.terminal.selectDefaultShell
    // - workbench.action.terminal.selectToNextLine
    // - workbench.action.terminal.selectToPreviousLine
    // - workbench.action.terminal.setDimensions
    // - workbench.action.terminal.showEnvironmentInformation
    // - workbench.action.terminal.showTabs
    // - workbench.action.terminal.showTextureAtlas
    // - workbench.action.terminal.sizeToContentWidthInstance
    // - workbench.action.terminal.splitInActiveWorkspace
    // - workbench.action.terminal.switchTerminal
    // - workbench.action.terminal.unsplit
    // - workbench.action.terminal.unsplitInstance
    // - workbench.action.terminal.writeDataToTerminal
    // - workbench.action.toggleActivityBarVisibility
    // - workbench.action.toggleAutoSave
    // - workbench.action.toggleCenteredLayout
    // - workbench.action.toggleCommenting
    // - workbench.action.toggleConfirmBeforeClose
    // - workbench.action.toggleEditorGroupLock
    // - workbench.action.toggleEditorType
    // - workbench.action.toggleEditorVisibility
    // - workbench.action.toggleEditorWidths
    // - workbench.action.toggleKeepEditors
    // - workbench.action.toggleKeybindingsLog
    // - workbench.action.toggleLightDarkThemes
    // - workbench.action.toggleMaximizedPanel
    // - workbench.action.toggleMultiCursorModifier
    // - workbench.action.toggleNotebookClipboardLog
    // - workbench.action.toggleScreencastMode
    // - workbench.action.toggleSearchOnType
    // - workbench.action.toggleSharedProcess
    // - workbench.action.toggleSidebarPosition
    // - workbench.action.toggleSplitEditorInGroup
    // - workbench.action.toggleSplitEditorInGroupLayout
    // - workbench.action.toggleStatusbarVisibility
    // - workbench.action.toggleTabsVisibility
    // - workbench.action.toggleWindowTabsBar
    // - workbench.action.triggerReconnect
    // - workbench.action.uninstallCommandLine
    // - workbench.action.unlockEditorGroup
    // - workbench.action.url.openUrl
    // - workbench.action.webview.openDeveloperTools
    // - workbench.action.webview.reloadWebviewAction
    // - workbench.actions.sync.compareWithLocal
    // - workbench.actions.sync.editMachineName
    // - workbench.actions.sync.replaceCurrent
    // - workbench.actions.sync.resolveResource
    // - workbench.actions.sync.turnOffSyncOnMachine
    // - workbench.actions.syncData.reset
    // - workbench.actions.table.workbench.panel.markers.view.viewAsTable
    // - workbench.actions.table.workbench.panel.markers.view.viewAsTree
    // - workbench.actions.treeView.workbench.panel.markers.view.collapseAll
    // - workbench.actions.view.toggleProblems
    // - workbench.actions.workbench.panel.comments.toggleResolvedComments
    // - workbench.actions.workbench.panel.comments.toggleUnResolvedComments
    // - workbench.actions.workbench.panel.markers.view.toggleActiveFile
    // - workbench.actions.workbench.panel.markers.view.toggleErrors
    // - workbench.actions.workbench.panel.markers.view.toggleExcludedFiles
    // - workbench.actions.workbench.panel.markers.view.toggleInfos
    // - workbench.actions.workbench.panel.markers.view.toggleWarnings
    // - workbench.debug.action.copyAll
    // - workbench.debug.action.focusBreakpointsView
    // - workbench.debug.action.focusCallStackView
    // - workbench.debug.action.focusRepl
    // - workbench.debug.action.focusVariablesView
    // - workbench.debug.action.focusWatchView
    // - workbench.debug.breakPointsView.resetViewLocation
    // - workbench.debug.callStackView.resetViewLocation
    // - workbench.debug.loadedScriptsView.focus
    // - workbench.debug.loadedScriptsView.resetViewLocation
    // - workbench.debug.panel.action.clearReplAction
    // - workbench.debug.variablesView.resetViewLocation
    // - workbench.debug.viewlet.action.addFunctionBreakpointAction
    // - workbench.debug.viewlet.action.addWatchExpression
    // - workbench.debug.viewlet.action.copyValue
    // - workbench.debug.viewlet.action.disableAllBreakpoints
    // - workbench.debug.viewlet.action.enableAllBreakpoints
    // - workbench.debug.viewlet.action.reapplyBreakpointsAction
    // - workbench.debug.viewlet.action.removeAllBreakpoints
    // - workbench.debug.viewlet.action.removeAllWatchExpressions
    // - workbench.debug.viewlet.action.removeBreakpoint
    // - workbench.debug.viewlet.action.toggleBreakpointsActivatedAction
    // - workbench.debug.viewlet.action.viewMemory
    // - workbench.debug.watchExpressionsView.resetViewLocation
    // - workbench.debug.welcome.focus
    // - workbench.debug.welcome.removeView
    // - workbench.debug.welcome.resetViewLocation
    // - workbench.debug.welcome.toggleVisibility
    // - workbench.editSessions.actions.delete
    // - workbench.editSessions.actions.deleteAll
    // - workbench.editSessions.actions.resetAuth
    // - workbench.editSessions.actions.resume
    // - workbench.editSessions.actions.resumeLatest
    // - workbench.editSessions.actions.showEditSessions
    // - workbench.editSessions.actions.showOutputChannel
    // - workbench.editSessions.actions.signIn
    // - workbench.editSessions.actions.store
    // - workbench.editSessions.actions.storeCurrent
    // - workbench.explorer.fileView.focus
    // - workbench.explorer.fileView.removeView
    // - workbench.explorer.fileView.resetViewLocation
    // - workbench.explorer.fileView.toggleVisibility
    // - workbench.explorer.openEditorsView.removeView
    // - workbench.explorer.openEditorsView.resetViewLocation
    // - workbench.explorer.openEditorsView.toggleVisibility
    // - workbench.extensions.action.addExtensionToWorkspaceRecommendations
    // - workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations
    // - workbench.extensions.action.addToWorkspaceFolderRecommendations
    // - workbench.extensions.action.addToWorkspaceIgnoredRecommendations
    // - workbench.extensions.action.addToWorkspaceRecommendations
    // - workbench.extensions.action.checkForUpdates
    // - workbench.extensions.action.clearExtensionsSearchResults
    // - workbench.extensions.action.clearLanguage
    // - workbench.extensions.action.configure
    // - workbench.extensions.action.configureKeybindings
    // - workbench.extensions.action.configureWorkspaceFolderRecommendedExtensions
    // - workbench.extensions.action.configureWorkspaceRecommendedExtensions
    // - workbench.extensions.action.copyExtension
    // - workbench.extensions.action.copyExtensionId
    // - workbench.extensions.action.debugExtensionHost
    // - workbench.extensions.action.disableAll
    // - workbench.extensions.action.disableAllWorkspace
    // - workbench.extensions.action.disableAutoUpdate
    // - workbench.extensions.action.enableAll
    // - workbench.extensions.action.enableAllWorkspace
    // - workbench.extensions.action.enableAutoUpdate
    // - workbench.extensions.action.extensionHostProfile
    // - workbench.extensions.action.extensionUpdates
    // - workbench.extensions.action.ignoreRecommendation
    // - workbench.extensions.action.install.specificVersion
    // - workbench.extensions.action.installExtensionFromLocation
    // - workbench.extensions.action.installExtensions
    // - workbench.extensions.action.installVSIX
    // - workbench.extensions.action.installWorkspaceRecommendedExtensions
    // - workbench.extensions.action.listBuiltInExtensions
    // - workbench.extensions.action.listWorkspaceUnsupportedExtensions
    // - workbench.extensions.action.manageAuthorizedExtensionURIs
    // - workbench.extensions.action.openExtensionsFolder
    // - workbench.extensions.action.recentlyPublishedExtensions
    // - workbench.extensions.action.refreshExtension
    // - workbench.extensions.action.reinstall
    // - workbench.extensions.action.removeExtensionFromWorkspaceRecommendations
    // - workbench.extensions.action.saveExtensionHostProfile
    // - workbench.extensions.action.setColorTheme
    // - workbench.extensions.action.setFileIconTheme
    // - workbench.extensions.action.setProductIconTheme
    // - workbench.extensions.action.showDisabledExtensions
    // - workbench.extensions.action.showEnabledExtensions
    // - workbench.extensions.action.showExtensionsForLanguage
    // - workbench.extensions.action.showExtensionsWithIds
    // - workbench.extensions.action.showLanguageExtensions
    // - workbench.extensions.action.showPopularExtensions
    // - workbench.extensions.action.showPreReleaseVersion
    // - workbench.extensions.action.showRecommendedExtensions
    // - workbench.extensions.action.showRecommendedKeymapExtensions
    // - workbench.extensions.action.showReleasedVersion
    // - workbench.extensions.action.stopExtensionHostProfile
    // - workbench.extensions.action.switchToPreReleaseVersion
    // - workbench.extensions.action.switchToReleaseVersion
    // - workbench.extensions.action.toggleIgnoreExtension
    // - workbench.extensions.action.undoIgnoredRecommendation
    // - workbench.extensions.action.updateAllExtensions
    // - workbench.extensions.command.installFromVSIX
    // - workbench.extensions.installMissingDependencies
    // - workbench.files.action.acceptLocalChanges
    // - workbench.files.action.collapseExplorerFolders
    // - workbench.files.action.compareFileWith
    // - workbench.files.action.compareNewUntitledTextFiles
    // - workbench.files.action.createFileFromExplorer
    // - workbench.files.action.createFolderFromExplorer
    // - workbench.files.action.focusFilesExplorer
    // - workbench.files.action.refreshFilesExplorer
    // - workbench.files.action.revertLocalChanges
    // - workbench.files.action.saveAllInGroup
    // - workbench.files.action.showActiveFileInExplorer
    // - workbench.getCodeExchangeProxyEndpoints
    // - workbench.notebook.layout.configure
    // - workbench.notebook.layout.configure.editorTitle
    // - workbench.notebook.layout.gettingStarted
    // - workbench.notebook.layout.select
    // - workbench.notebook.layout.webview.reset
    // - workbench.output.action.clearOutput
    // - workbench.output.action.switchBetweenOutputs
    // - workbench.output.action.toggleAutoScroll
    // - workbench.panel.markers.resetViewContainerLocation
    // - workbench.panel.markers.view.focus
    // - workbench.panel.markers.view.removeView
    // - workbench.panel.markers.view.resetViewLocation
    // - workbench.panel.markers.view.toggleVisibility
    // - workbench.panel.output.focus
    // - workbench.panel.output.removeView
    // - workbench.panel.output.resetViewContainerLocation
    // - workbench.panel.output.resetViewLocation
    // - workbench.panel.output.toggleVisibility
    // - workbench.panel.repl.resetViewContainerLocation
    // - workbench.panel.repl.view.focus
    // - workbench.panel.repl.view.removeView
    // - workbench.panel.repl.view.resetViewLocation
    // - workbench.panel.repl.view.toggleVisibility
    // - workbench.profiles.actions.cleanupProfiles
    // - workbench.profiles.actions.createEmptyProfile
    // - workbench.profiles.actions.createFromCurrentProfile
    // - workbench.profiles.actions.createProfile
    // - workbench.profiles.actions.createTemporaryProfile
    // - workbench.profiles.actions.deleteProfile
    // - workbench.profiles.actions.exportProfile
    // - workbench.profiles.actions.importProfile
    // - workbench.profiles.actions.manage
    // - workbench.profiles.actions.profileEntry.__default__profile__
    // - workbench.profiles.actions.renameCurrentProfile
    // - workbench.profiles.actions.renameProfile
    // - workbench.profiles.actions.resetWorkspaces
    // - workbench.profiles.actions.showProfileContents
    // - workbench.profiles.actions.switchProfile
    // - workbench.remoteTunnel.actions.configure
    // - workbench.remoteTunnel.actions.connecting
    // - workbench.remoteTunnel.actions.copyToClipboard
    // - workbench.remoteTunnel.actions.learnMore
    // - workbench.remoteTunnel.actions.manage
    // - workbench.remoteTunnel.actions.showLog
    // - workbench.remoteTunnel.actions.turnOff
    // - workbench.remoteTunnel.actions.turnOn
    // - workbench.scm.action.collapseAllRepositories
    // - workbench.scm.action.expandAllRepositories
    // - workbench.scm.action.repositories.setSortKey.discoveryTime
    // - workbench.scm.action.repositories.setSortKey.name
    // - workbench.scm.action.repositories.setSortKey.path
    // - workbench.scm.action.setListViewMode
    // - workbench.scm.action.setSortKey.name
    // - workbench.scm.action.setSortKey.path
    // - workbench.scm.action.setSortKey.status
    // - workbench.scm.action.setTreeViewMode
    // - workbench.scm.focus
    // - workbench.scm.removeView
    // - workbench.scm.repositories.focus
    // - workbench.scm.repositories.removeView
    // - workbench.scm.repositories.resetViewLocation
    // - workbench.scm.repositories.toggleVisibility
    // - workbench.scm.resetViewLocation
    // - workbench.scm.toggleVisibility
    // - workbench.trust.configure
    // - workbench.trust.manage
    // - workbench.userData.actions.cancelTurnOn
    // - workbench.userData.actions.openSyncBackupsFolder
    // - workbench.userData.actions.signin
    // - workbench.userData.actions.turningOn
    // - workbench.userDataSync.actions.acceptMerges
    // - workbench.userDataSync.actions.configure
    // - workbench.userDataSync.actions.help
    // - workbench.userDataSync.actions.manage
    // - workbench.userDataSync.actions.settings
    // - workbench.userDataSync.actions.showConflicts
    // - workbench.userDataSync.actions.showLog
    // - workbench.userDataSync.actions.showSyncedData
    // - workbench.userDataSync.actions.syncNow
    // - workbench.userDataSync.actions.turnOff
    // - workbench.userDataSync.actions.turnOn
    // - workbench.view.debug.resetViewContainerLocation
    // - workbench.view.editSessions.resetViewContainerLocation
    // - workbench.view.explorer.resetViewContainerLocation
    // - workbench.view.extension.cmake__viewContainer
    // - workbench.view.extension.cmake__viewContainer.resetViewContainerLocation
    // - workbench.view.extension.gitlens
    // - workbench.view.extension.gitlens.resetViewContainerLocation
    // - workbench.view.extension.gitlensPanel
    // - workbench.view.extension.gitlensPanel.resetViewContainerLocation
    // - workbench.view.extension.makefile__viewContainer
    // - workbench.view.extension.makefile__viewContainer.resetViewContainerLocation
    // - workbench.view.extension.references-view
    // - workbench.view.extension.references-view.resetViewContainerLocation
    // - workbench.view.extension.test
    // - workbench.view.extension.test.resetViewContainerLocation
    // - workbench.view.extensions.resetViewContainerLocation
    // - workbench.view.remote
    // - workbench.view.remote.resetViewContainerLocation
    // - workbench.view.scm.resetViewContainerLocation
    // - workbench.view.search.focus
    // - workbench.view.search.removeView
    // - workbench.view.search.resetViewContainerLocation
    // - workbench.view.search.resetViewLocation
    // - workbench.view.search.toggleVisibility
    // - workbench.view.sync
    // - workbench.view.sync.resetViewContainerLocation
    // - workbench.view.testing.focus
    // - workbench.view.testing.removeView
    // - workbench.view.testing.resetViewLocation
    // - workbench.view.testing.toggleVisibility
    // - workbench.views.editSessions.data.focus
    // - workbench.views.editSessions.data.resetViewLocation
    // - workbench.views.extensions.builtinFeatureExtensions.focus
    // - workbench.views.extensions.builtinFeatureExtensions.resetViewLocation
    // - workbench.views.extensions.builtinProgrammingLanguageExtensions.focus
    // - workbench.views.extensions.builtinProgrammingLanguageExtensions.resetViewLocation
    // - workbench.views.extensions.builtinThemeExtensions.focus
    // - workbench.views.extensions.builtinThemeExtensions.resetViewLocation
    // - workbench.views.extensions.deprecatedExtensions.focus
    // - workbench.views.extensions.deprecatedExtensions.resetViewLocation
    // - workbench.views.extensions.disabled.focus
    // - workbench.views.extensions.disabled.resetViewLocation
    // - workbench.views.extensions.enabled.focus
    // - workbench.views.extensions.enabled.resetViewLocation
    // - workbench.views.extensions.installed.focus
    // - workbench.views.extensions.installed.resetViewLocation
    // - workbench.views.extensions.marketplace.focus
    // - workbench.views.extensions.marketplace.resetViewLocation
    // - workbench.views.extensions.otherRecommendations.focus
    // - workbench.views.extensions.otherRecommendations.resetViewLocation
    // - workbench.views.extensions.popular.focus
    // - workbench.views.extensions.popular.resetViewLocation
    // - workbench.views.extensions.searchBuiltin.focus
    // - workbench.views.extensions.searchBuiltin.resetViewLocation
    // - workbench.views.extensions.searchDisabled.focus
    // - workbench.views.extensions.searchDisabled.resetViewLocation
    // - workbench.views.extensions.searchEnabled.focus
    // - workbench.views.extensions.searchEnabled.resetViewLocation
    // - workbench.views.extensions.searchInstalled.focus
    // - workbench.views.extensions.searchInstalled.resetViewLocation
    // - workbench.views.extensions.searchOutdated.focus
    // - workbench.views.extensions.searchOutdated.resetViewLocation
    // - workbench.views.extensions.searchRecentlyUpdated.focus
    // - workbench.views.extensions.searchRecentlyUpdated.resetViewLocation
    // - workbench.views.extensions.searchWorkspaceUnsupported.focus
    // - workbench.views.extensions.searchWorkspaceUnsupported.resetViewLocation
    // - workbench.views.extensions.untrustedPartiallySupportedExtensions.focus
    // - workbench.views.extensions.untrustedPartiallySupportedExtensions.resetViewLocation
    // - workbench.views.extensions.untrustedUnsupportedExtensions.focus
    // - workbench.views.extensions.untrustedUnsupportedExtensions.resetViewLocation
    // - workbench.views.extensions.virtualPartiallySupportedExtensions.focus
    // - workbench.views.extensions.virtualPartiallySupportedExtensions.resetViewLocation
    // - workbench.views.extensions.virtualUnsupportedExtensions.focus
    // - workbench.views.extensions.virtualUnsupportedExtensions.resetViewLocation
    // - workbench.views.extensions.workspaceRecommendations.focus
    // - workbench.views.extensions.workspaceRecommendations.resetViewLocation
    // - workbench.views.sync.conflicts.focus
    // - workbench.views.sync.conflicts.resetViewLocation
    // - workbench.views.sync.localActivity.focus
    // - workbench.views.sync.localActivity.resetViewLocation
    // - workbench.views.sync.machines.focus
    // - workbench.views.sync.machines.resetViewLocation
    // - workbench.views.sync.remoteActivity.focus
    // - workbench.views.sync.remoteActivity.resetViewLocation
    // - workbench.views.sync.troubleshoot.focus
    // - workbench.views.sync.troubleshoot.resetViewLocation